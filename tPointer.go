package hamt

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _Pointer struct {
	tag uint
	x1  _Bucket
	x2  _Link__InteriorNode
}
type Pointer = *_Pointer

type _Pointer__iface interface {
	_Pointer__member()
}

func (_Bucket) _Pointer__member()             {}
func (_Link__InteriorNode) _Pointer__member() {}
func (n _Pointer) AsInterface() _Pointer__iface {
	switch n.tag {
	case 1:
		return &n.x1
	case 2:
		return &n.x2
	default:
		panic("invalid union state; how did you create this object?")
	}
}

type _Pointer__Maybe struct {
	m schema.Maybe
	v Pointer
}
type MaybePointer = *_Pointer__Maybe

func (m MaybePointer) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybePointer) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybePointer) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybePointer) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybePointer) Must() Pointer {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	memberName__Pointer_Bucket             = _String{"Bucket"}
	memberName__Pointer_Link__InteriorNode = _String{"Link__InteriorNode"}
)
var _ ipld.Node = (Pointer)(&_Pointer{})
var _ schema.TypedNode = (Pointer)(&_Pointer{})

func (Pointer) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n Pointer) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Bucket":
		if n.tag != 1 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x1, nil
	case "Link__InteriorNode":
		if n.tag != 2 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return &n.x2, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n Pointer) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Pointer) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"hamt.Pointer"}.LookupByIndex(0)
}
func (n Pointer) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Pointer) MapIterator() ipld.MapIterator {
	return &_Pointer__MapItr{n, false}
}

type _Pointer__MapItr struct {
	n    Pointer
	done bool
}

func (itr *_Pointer__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.done {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.n.tag {
	case 1:
		return &memberName__Pointer_Bucket, &itr.n.x1, nil
	case 2:
		return &memberName__Pointer_Link__InteriorNode, &itr.n.x2, nil
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_Pointer__MapItr) Done() bool {
	return itr.done
}

func (Pointer) ListIterator() ipld.ListIterator {
	return nil
}
func (Pointer) Length() int {
	return 1
}
func (Pointer) IsAbsent() bool {
	return false
}
func (Pointer) IsNull() bool {
	return false
}
func (Pointer) AsBool() (bool, error) {
	return mixins.Map{"hamt.Pointer"}.AsBool()
}
func (Pointer) AsInt() (int, error) {
	return mixins.Map{"hamt.Pointer"}.AsInt()
}
func (Pointer) AsFloat() (float64, error) {
	return mixins.Map{"hamt.Pointer"}.AsFloat()
}
func (Pointer) AsString() (string, error) {
	return mixins.Map{"hamt.Pointer"}.AsString()
}
func (Pointer) AsBytes() ([]byte, error) {
	return mixins.Map{"hamt.Pointer"}.AsBytes()
}
func (Pointer) AsLink() (ipld.Link, error) {
	return mixins.Map{"hamt.Pointer"}.AsLink()
}
func (Pointer) Prototype() ipld.NodePrototype {
	return _Pointer__Prototype{}
}

type _Pointer__Prototype struct{}

func (_Pointer__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Pointer__Builder
	nb.Reset()
	return &nb
}

type _Pointer__Builder struct {
	_Pointer__Assembler
}

func (nb *_Pointer__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Pointer__Builder) Reset() {
	var w _Pointer
	var m schema.Maybe
	*nb = _Pointer__Builder{_Pointer__Assembler{w: &w, m: &m}}
}

type _Pointer__Assembler struct {
	w     *_Pointer
	m     *schema.Maybe
	state maState

	cm  schema.Maybe
	ca1 _Bucket__Assembler

	ca2 _Link__InteriorNode__Assembler
	ca  uint
}

func (na *_Pointer__Assembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()

	case 2:
		na.ca2.reset()
	default:
		panic("unreachable")
	}
	na.cm = schema.Maybe_Absent
}
func (na *_Pointer__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Pointer{}
	}
	return na, nil
}
func (_Pointer__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"hamt.Pointer"}.BeginList(0)
}
func (na *_Pointer__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"hamt.Pointer"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Pointer__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"hamt.Pointer"}.AssignBool(false)
}
func (_Pointer__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"hamt.Pointer"}.AssignInt(0)
}
func (_Pointer__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"hamt.Pointer"}.AssignFloat(0)
}
func (_Pointer__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"hamt.Pointer"}.AssignString("")
}
func (_Pointer__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"hamt.Pointer"}.AssignBytes(nil)
}
func (_Pointer__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"hamt.Pointer"}.AssignLink(nil)
}
func (na *_Pointer__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Pointer); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "hamt.Pointer", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Pointer__Assembler) Prototype() ipld.NodePrototype {
	return _Pointer__Prototype{}
}
func (ma *_Pointer__Assembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_Pointer__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName: "hamt.Pointer", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "Bucket":
		ma.state = maState_midValue
		ma.ca = 1
		ma.w.tag = 1
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1, nil
	case "Link__InteriorNode":
		ma.state = maState_midValue
		ma.ca = 2
		ma.w.tag = 2
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName: "hamt.Pointer", Key: &_String{k}}
	}
}
func (ma *_Pointer__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Pointer__KeyAssembler)(ma)
}
func (ma *_Pointer__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 0:
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1
	case 1:
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2
	default:
		panic("unreachable")
	}
}
func (ma *_Pointer__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName: "hamt.Pointer", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Pointer__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Pointer__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	switch k {
	case "Bucket":
		return _Bucket__Prototype{}
	case "Link__InteriorNode":
		return _Link__InteriorNode__Prototype{}
	default:
		return nil
	}
}

type _Pointer__KeyAssembler _Pointer__Assembler

func (_Pointer__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"hamt.Pointer.KeyAssembler"}.BeginMap(0)
}
func (_Pointer__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"hamt.Pointer.KeyAssembler"}.BeginList(0)
}
func (na *_Pointer__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"hamt.Pointer.KeyAssembler"}.AssignNull()
}
func (_Pointer__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"hamt.Pointer.KeyAssembler"}.AssignBool(false)
}
func (_Pointer__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"hamt.Pointer.KeyAssembler"}.AssignInt(0)
}
func (_Pointer__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"hamt.Pointer.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Pointer__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName: "hamt.Pointer", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "Bucket":
		ka.ca = 1
		ka.w.tag = 1
		ka.state = maState_expectValue
		return nil
	case "Link__InteriorNode":
		ka.ca = 2
		ka.w.tag = 2
		ka.state = maState_expectValue
		return nil
	default:
		return ipld.ErrInvalidKey{TypeName: "hamt.Pointer", Key: &_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
	}
	return nil
}
func (_Pointer__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"hamt.Pointer.KeyAssembler"}.AssignBytes(nil)
}
func (_Pointer__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"hamt.Pointer.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Pointer__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Pointer__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (Pointer) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Pointer) Representation() ipld.Node {
	return (*_Pointer__Repr)(n)
}

type _Pointer__Repr _Pointer

var (
	memberName__Pointer_Bucket_serial             = _String{"0"}
	memberName__Pointer_Link__InteriorNode_serial = _String{"1"}
)
var _ ipld.Node = &_Pointer__Repr{}

func (_Pointer__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n *_Pointer__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "0":
		if n.tag != 1 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return n.x1.Representation(), nil
	case "1":
		if n.tag != 2 {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return n.x2.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_Pointer__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Pointer__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"hamt.Pointer.Repr"}.LookupByIndex(0)
}
func (n _Pointer__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Pointer__Repr) MapIterator() ipld.MapIterator {
	return &_Pointer__ReprMapItr{n, false}
}

type _Pointer__ReprMapItr struct {
	n    *_Pointer__Repr
	done bool
}

func (itr *_Pointer__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.done {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.n.tag {
	case 1:
		return &memberName__Pointer_Bucket_serial, itr.n.x1.Representation(), nil
	case 2:
		return &memberName__Pointer_Link__InteriorNode_serial, itr.n.x2.Representation(), nil
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_Pointer__ReprMapItr) Done() bool {
	return itr.done
}

func (_Pointer__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (_Pointer__Repr) Length() int {
	return 1
}
func (_Pointer__Repr) IsAbsent() bool {
	return false
}
func (_Pointer__Repr) IsNull() bool {
	return false
}
func (_Pointer__Repr) AsBool() (bool, error) {
	return mixins.Map{"hamt.Pointer.Repr"}.AsBool()
}
func (_Pointer__Repr) AsInt() (int, error) {
	return mixins.Map{"hamt.Pointer.Repr"}.AsInt()
}
func (_Pointer__Repr) AsFloat() (float64, error) {
	return mixins.Map{"hamt.Pointer.Repr"}.AsFloat()
}
func (_Pointer__Repr) AsString() (string, error) {
	return mixins.Map{"hamt.Pointer.Repr"}.AsString()
}
func (_Pointer__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"hamt.Pointer.Repr"}.AsBytes()
}
func (_Pointer__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"hamt.Pointer.Repr"}.AsLink()
}
func (_Pointer__Repr) Prototype() ipld.NodePrototype {
	return _Pointer__ReprPrototype{}
}

type _Pointer__ReprPrototype struct{}

func (_Pointer__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Pointer__ReprBuilder
	nb.Reset()
	return &nb
}

type _Pointer__ReprBuilder struct {
	_Pointer__ReprAssembler
}

func (nb *_Pointer__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Pointer__ReprBuilder) Reset() {
	var w _Pointer
	var m schema.Maybe
	*nb = _Pointer__ReprBuilder{_Pointer__ReprAssembler{w: &w, m: &m}}
}

type _Pointer__ReprAssembler struct {
	w     *_Pointer
	m     *schema.Maybe
	state maState

	cm  schema.Maybe
	ca1 _Bucket__ReprAssembler

	ca2 _Link__InteriorNode__ReprAssembler
	ca  uint
}

func (na *_Pointer__ReprAssembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()

	case 2:
		na.ca2.reset()
	default:
		panic("unreachable")
	}
	na.cm = schema.Maybe_Absent
}
func (na *_Pointer__ReprAssembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Pointer{}
	}
	return na, nil
}
func (_Pointer__ReprAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"hamt.Pointer.Repr"}.BeginList(0)
}
func (na *_Pointer__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"hamt.Pointer.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Pointer__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"hamt.Pointer.Repr"}.AssignBool(false)
}
func (_Pointer__ReprAssembler) AssignInt(int) error {
	return mixins.MapAssembler{"hamt.Pointer.Repr"}.AssignInt(0)
}
func (_Pointer__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"hamt.Pointer.Repr"}.AssignFloat(0)
}
func (_Pointer__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"hamt.Pointer.Repr"}.AssignString("")
}
func (_Pointer__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"hamt.Pointer.Repr"}.AssignBytes(nil)
}
func (_Pointer__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"hamt.Pointer.Repr"}.AssignLink(nil)
}
func (na *_Pointer__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Pointer); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "hamt.Pointer.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Pointer__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Pointer__ReprPrototype{}
}
func (ma *_Pointer__ReprAssembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_Pointer__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName: "hamt.Pointer.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "0":
		ma.state = maState_midValue
		ma.ca = 1
		ma.w.tag = 1
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1, nil
	case "1":
		ma.state = maState_midValue
		ma.ca = 2
		ma.w.tag = 2
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName: "hamt.Pointer.Repr", Key: &_String{k}}
	}
}
func (ma *_Pointer__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Pointer__ReprKeyAssembler)(ma)
}
func (ma *_Pointer__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 0:
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1
	case 1:
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2
	default:
		panic("unreachable")
	}
}
func (ma *_Pointer__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName: "hamt.Pointer.Repr", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Pointer__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Pointer__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	switch k {
	case "Bucket":
		return _Bucket__ReprPrototype{}
	case "Link__InteriorNode":
		return _Link__InteriorNode__ReprPrototype{}
	default:
		return nil
	}
}

type _Pointer__ReprKeyAssembler _Pointer__ReprAssembler

func (_Pointer__ReprKeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"hamt.Pointer.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Pointer__ReprKeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"hamt.Pointer.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Pointer__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"hamt.Pointer.Repr.KeyAssembler"}.AssignNull()
}
func (_Pointer__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"hamt.Pointer.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Pointer__ReprKeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"hamt.Pointer.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Pointer__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"hamt.Pointer.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Pointer__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName: "hamt.Pointer.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "0":
		ka.ca = 1
		ka.w.tag = 1
		ka.state = maState_expectValue
		return nil
	case "1":
		ka.ca = 2
		ka.w.tag = 2
		ka.state = maState_expectValue
		return nil
	default:
		return ipld.ErrInvalidKey{TypeName: "hamt.Pointer.Repr", Key: &_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
	}
	return nil
}
func (_Pointer__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"hamt.Pointer.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Pointer__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"hamt.Pointer.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Pointer__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Pointer__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
