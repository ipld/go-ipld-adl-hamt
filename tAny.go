package hamt

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _Any struct {
	x _Any__iface
}
type Any = *_Any

type _Any__iface interface {
	_Any__member()
}

func (_Bool) _Any__member()   {}
func (_Int) _Any__member()    {}
func (_Float) _Any__member()  {}
func (_String) _Any__member() {}
func (_Bytes) _Any__member()  {}
func (_Map) _Any__member()    {}
func (_List) _Any__member()   {}
func (_Link) _Any__member()   {}
func (n _Any) AsInterface() _Any__iface {
	return n.x
}

type _Any__Maybe struct {
	m schema.Maybe
	v Any
}
type MaybeAny = *_Any__Maybe

func (m MaybeAny) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeAny) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeAny) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeAny) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeAny) Must() Any {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	memberName__Any_Bool   = _String{"Bool"}
	memberName__Any_Int    = _String{"Int"}
	memberName__Any_Float  = _String{"Float"}
	memberName__Any_String = _String{"String"}
	memberName__Any_Bytes  = _String{"Bytes"}
	memberName__Any_Map    = _String{"Map"}
	memberName__Any_List   = _String{"List"}
	memberName__Any_Link   = _String{"Link"}
)
var _ ipld.Node = (Any)(&_Any{})
var _ schema.TypedNode = (Any)(&_Any{})

func (Any) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n Any) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Bool":
		if n2, ok := n.x.(Bool); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "Int":
		if n2, ok := n.x.(Int); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "Float":
		if n2, ok := n.x.(Float); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "String":
		if n2, ok := n.x.(String); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "Bytes":
		if n2, ok := n.x.(Bytes); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "Map":
		if n2, ok := n.x.(Map); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "List":
		if n2, ok := n.x.(List); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "Link":
		if n2, ok := n.x.(Link); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n Any) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Any) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"hamt.Any"}.LookupByIndex(0)
}
func (n Any) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Any) MapIterator() ipld.MapIterator {
	return &_Any__MapItr{n, false}
}

type _Any__MapItr struct {
	n    Any
	done bool
}

func (itr *_Any__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.done {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch n2 := itr.n.x.(type) {
	case Bool:
		return &memberName__Any_Bool, n2, nil
	case Int:
		return &memberName__Any_Int, n2, nil
	case Float:
		return &memberName__Any_Float, n2, nil
	case String:
		return &memberName__Any_String, n2, nil
	case Bytes:
		return &memberName__Any_Bytes, n2, nil
	case Map:
		return &memberName__Any_Map, n2, nil
	case List:
		return &memberName__Any_List, n2, nil
	case Link:
		return &memberName__Any_Link, n2, nil
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_Any__MapItr) Done() bool {
	return itr.done
}

func (Any) ListIterator() ipld.ListIterator {
	return nil
}
func (Any) Length() int {
	return 1
}
func (Any) IsAbsent() bool {
	return false
}
func (Any) IsNull() bool {
	return false
}
func (Any) AsBool() (bool, error) {
	return mixins.Map{"hamt.Any"}.AsBool()
}
func (Any) AsInt() (int, error) {
	return mixins.Map{"hamt.Any"}.AsInt()
}
func (Any) AsFloat() (float64, error) {
	return mixins.Map{"hamt.Any"}.AsFloat()
}
func (Any) AsString() (string, error) {
	return mixins.Map{"hamt.Any"}.AsString()
}
func (Any) AsBytes() ([]byte, error) {
	return mixins.Map{"hamt.Any"}.AsBytes()
}
func (Any) AsLink() (ipld.Link, error) {
	return mixins.Map{"hamt.Any"}.AsLink()
}
func (Any) Prototype() ipld.NodePrototype {
	return _Any__Prototype{}
}

type _Any__Prototype struct{}

func (_Any__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Any__Builder
	nb.Reset()
	return &nb
}

type _Any__Builder struct {
	_Any__Assembler
}

func (nb *_Any__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Any__Builder) Reset() {
	var w _Any
	var m schema.Maybe
	*nb = _Any__Builder{_Any__Assembler{w: &w, m: &m}}
}

type _Any__Assembler struct {
	w     *_Any
	m     *schema.Maybe
	state maState

	cm  schema.Maybe
	ca1 *_Bool__Assembler

	ca2 *_Int__Assembler

	ca3 *_Float__Assembler

	ca4 *_String__Assembler

	ca5 *_Bytes__Assembler

	ca6 *_Map__Assembler

	ca7 *_List__Assembler

	ca8 *_Link__Assembler
	ca  uint
}

func (na *_Any__Assembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()

	case 2:
		na.ca2.reset()

	case 3:
		na.ca3.reset()

	case 4:
		na.ca4.reset()

	case 5:
		na.ca5.reset()

	case 6:
		na.ca6.reset()

	case 7:
		na.ca7.reset()

	case 8:
		na.ca8.reset()
	default:
		panic("unreachable")
	}
	na.cm = schema.Maybe_Absent
}
func (na *_Any__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Any{}
	}
	return na, nil
}
func (_Any__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"hamt.Any"}.BeginList(0)
}
func (na *_Any__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"hamt.Any"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Any__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"hamt.Any"}.AssignBool(false)
}
func (_Any__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"hamt.Any"}.AssignInt(0)
}
func (_Any__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"hamt.Any"}.AssignFloat(0)
}
func (_Any__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"hamt.Any"}.AssignString("")
}
func (_Any__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"hamt.Any"}.AssignBytes(nil)
}
func (_Any__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"hamt.Any"}.AssignLink(nil)
}
func (na *_Any__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Any); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "hamt.Any", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Any__Assembler) Prototype() ipld.NodePrototype {
	return _Any__Prototype{}
}
func (ma *_Any__Assembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_Any__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName: "hamt.Any", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "Bool":
		ma.state = maState_midValue
		ma.ca = 1
		x := &_Bool{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_Bool__Assembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1, nil
	case "Int":
		ma.state = maState_midValue
		ma.ca = 2
		x := &_Int{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_Int__Assembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2, nil
	case "Float":
		ma.state = maState_midValue
		ma.ca = 3
		x := &_Float{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Float__Assembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3, nil
	case "String":
		ma.state = maState_midValue
		ma.ca = 4
		x := &_String{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_String__Assembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4, nil
	case "Bytes":
		ma.state = maState_midValue
		ma.ca = 5
		x := &_Bytes{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Bytes__Assembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5, nil
	case "Map":
		ma.state = maState_midValue
		ma.ca = 6
		x := &_Map{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Map__Assembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6, nil
	case "List":
		ma.state = maState_midValue
		ma.ca = 7
		x := &_List{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_List__Assembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7, nil
	case "Link":
		ma.state = maState_midValue
		ma.ca = 8
		x := &_Link{}
		ma.w.x = x
		if ma.ca8 == nil {
			ma.ca8 = &_Link__Assembler{}
		}
		ma.ca8.w = x
		ma.ca8.m = &ma.cm
		return ma.ca8, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName: "hamt.Any", Key: &_String{k}}
	}
}
func (ma *_Any__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Any__KeyAssembler)(ma)
}
func (ma *_Any__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 0:
		x := &_Bool{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_Bool__Assembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1
	case 1:
		x := &_Int{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_Int__Assembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2
	case 2:
		x := &_Float{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Float__Assembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3
	case 3:
		x := &_String{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_String__Assembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4
	case 4:
		x := &_Bytes{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Bytes__Assembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5
	case 5:
		x := &_Map{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Map__Assembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6
	case 6:
		x := &_List{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_List__Assembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7
	case 7:
		x := &_Link{}
		ma.w.x = x
		if ma.ca8 == nil {
			ma.ca8 = &_Link__Assembler{}
		}
		ma.ca8.w = x
		ma.ca8.m = &ma.cm
		return ma.ca8
	default:
		panic("unreachable")
	}
}
func (ma *_Any__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName: "hamt.Any", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Any__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Any__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	switch k {
	case "Bool":
		return _Bool__Prototype{}
	case "Int":
		return _Int__Prototype{}
	case "Float":
		return _Float__Prototype{}
	case "String":
		return _String__Prototype{}
	case "Bytes":
		return _Bytes__Prototype{}
	case "Map":
		return _Map__Prototype{}
	case "List":
		return _List__Prototype{}
	case "Link":
		return _Link__Prototype{}
	default:
		return nil
	}
}

type _Any__KeyAssembler _Any__Assembler

func (_Any__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"hamt.Any.KeyAssembler"}.BeginMap(0)
}
func (_Any__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"hamt.Any.KeyAssembler"}.BeginList(0)
}
func (na *_Any__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"hamt.Any.KeyAssembler"}.AssignNull()
}
func (_Any__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"hamt.Any.KeyAssembler"}.AssignBool(false)
}
func (_Any__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"hamt.Any.KeyAssembler"}.AssignInt(0)
}
func (_Any__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"hamt.Any.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Any__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName: "hamt.Any", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "Bool":
		ka.ca = 1
		ka.state = maState_expectValue
		return nil
	case "Int":
		ka.ca = 2
		ka.state = maState_expectValue
		return nil
	case "Float":
		ka.ca = 3
		ka.state = maState_expectValue
		return nil
	case "String":
		ka.ca = 4
		ka.state = maState_expectValue
		return nil
	case "Bytes":
		ka.ca = 5
		ka.state = maState_expectValue
		return nil
	case "Map":
		ka.ca = 6
		ka.state = maState_expectValue
		return nil
	case "List":
		ka.ca = 7
		ka.state = maState_expectValue
		return nil
	case "Link":
		ka.ca = 8
		ka.state = maState_expectValue
		return nil
	default:
		return ipld.ErrInvalidKey{TypeName: "hamt.Any", Key: &_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
	}
	return nil
}
func (_Any__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"hamt.Any.KeyAssembler"}.AssignBytes(nil)
}
func (_Any__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"hamt.Any.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Any__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Any__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (Any) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Any) Representation() ipld.Node {
	return (*_Any__Repr)(n)
}

type _Any__Repr _Any

var (
	memberName__Any_Bool_serial   = _String{"bool"}
	memberName__Any_Int_serial    = _String{"int"}
	memberName__Any_Float_serial  = _String{"float"}
	memberName__Any_String_serial = _String{"string"}
	memberName__Any_Bytes_serial  = _String{"bytes"}
	memberName__Any_Map_serial    = _String{"map"}
	memberName__Any_List_serial   = _String{"list"}
	memberName__Any_Link_serial   = _String{"link"}
)
var _ ipld.Node = &_Any__Repr{}

func (_Any__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n *_Any__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "bool":
		if n2, ok := n.x.(Bool); ok {
			return n2.Representation(), nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "int":
		if n2, ok := n.x.(Int); ok {
			return n2.Representation(), nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "float":
		if n2, ok := n.x.(Float); ok {
			return n2.Representation(), nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "string":
		if n2, ok := n.x.(String); ok {
			return n2.Representation(), nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "bytes":
		if n2, ok := n.x.(Bytes); ok {
			return n2.Representation(), nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "map":
		if n2, ok := n.x.(Map); ok {
			return n2.Representation(), nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "list":
		if n2, ok := n.x.(List); ok {
			return n2.Representation(), nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "link":
		if n2, ok := n.x.(Link); ok {
			return n2.Representation(), nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_Any__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Any__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"hamt.Any.Repr"}.LookupByIndex(0)
}
func (n _Any__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Any__Repr) MapIterator() ipld.MapIterator {
	return &_Any__ReprMapItr{n, false}
}

type _Any__ReprMapItr struct {
	n    *_Any__Repr
	done bool
}

func (itr *_Any__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.done {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch n2 := itr.n.x.(type) {
	case Bool:
		return &memberName__Any_Bool_serial, n2.Representation(), nil
	case Int:
		return &memberName__Any_Int_serial, n2.Representation(), nil
	case Float:
		return &memberName__Any_Float_serial, n2.Representation(), nil
	case String:
		return &memberName__Any_String_serial, n2.Representation(), nil
	case Bytes:
		return &memberName__Any_Bytes_serial, n2.Representation(), nil
	case Map:
		return &memberName__Any_Map_serial, n2.Representation(), nil
	case List:
		return &memberName__Any_List_serial, n2.Representation(), nil
	case Link:
		return &memberName__Any_Link_serial, n2.Representation(), nil
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_Any__ReprMapItr) Done() bool {
	return itr.done
}

func (_Any__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (_Any__Repr) Length() int {
	return 1
}
func (_Any__Repr) IsAbsent() bool {
	return false
}
func (_Any__Repr) IsNull() bool {
	return false
}
func (_Any__Repr) AsBool() (bool, error) {
	return mixins.Map{"hamt.Any.Repr"}.AsBool()
}
func (_Any__Repr) AsInt() (int, error) {
	return mixins.Map{"hamt.Any.Repr"}.AsInt()
}
func (_Any__Repr) AsFloat() (float64, error) {
	return mixins.Map{"hamt.Any.Repr"}.AsFloat()
}
func (_Any__Repr) AsString() (string, error) {
	return mixins.Map{"hamt.Any.Repr"}.AsString()
}
func (_Any__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"hamt.Any.Repr"}.AsBytes()
}
func (_Any__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"hamt.Any.Repr"}.AsLink()
}
func (_Any__Repr) Prototype() ipld.NodePrototype {
	return _Any__ReprPrototype{}
}

type _Any__ReprPrototype struct{}

func (_Any__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Any__ReprBuilder
	nb.Reset()
	return &nb
}

type _Any__ReprBuilder struct {
	_Any__ReprAssembler
}

func (nb *_Any__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Any__ReprBuilder) Reset() {
	var w _Any
	var m schema.Maybe
	*nb = _Any__ReprBuilder{_Any__ReprAssembler{w: &w, m: &m}}
}

type _Any__ReprAssembler struct {
	w     *_Any
	m     *schema.Maybe
	state maState

	cm  schema.Maybe
	ca1 *_Bool__ReprAssembler

	ca2 *_Int__ReprAssembler

	ca3 *_Float__ReprAssembler

	ca4 *_String__ReprAssembler

	ca5 *_Bytes__ReprAssembler

	ca6 *_Map__ReprAssembler

	ca7 *_List__ReprAssembler

	ca8 *_Link__ReprAssembler
	ca  uint
}

func (na *_Any__ReprAssembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()

	case 2:
		na.ca2.reset()

	case 3:
		na.ca3.reset()

	case 4:
		na.ca4.reset()

	case 5:
		na.ca5.reset()

	case 6:
		na.ca6.reset()

	case 7:
		na.ca7.reset()

	case 8:
		na.ca8.reset()
	default:
		panic("unreachable")
	}
	na.cm = schema.Maybe_Absent
}
func (na *_Any__ReprAssembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Any{}
	}
	return na, nil
}
func (_Any__ReprAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"hamt.Any.Repr"}.BeginList(0)
}
func (na *_Any__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"hamt.Any.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Any__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"hamt.Any.Repr"}.AssignBool(false)
}
func (_Any__ReprAssembler) AssignInt(int) error {
	return mixins.MapAssembler{"hamt.Any.Repr"}.AssignInt(0)
}
func (_Any__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"hamt.Any.Repr"}.AssignFloat(0)
}
func (_Any__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"hamt.Any.Repr"}.AssignString("")
}
func (_Any__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"hamt.Any.Repr"}.AssignBytes(nil)
}
func (_Any__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"hamt.Any.Repr"}.AssignLink(nil)
}
func (na *_Any__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Any); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "hamt.Any.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Any__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Any__ReprPrototype{}
}
func (ma *_Any__ReprAssembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_Any__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName: "hamt.Any.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "bool":
		ma.state = maState_midValue
		ma.ca = 1
		x := &_Bool{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_Bool__ReprAssembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1, nil
	case "int":
		ma.state = maState_midValue
		ma.ca = 2
		x := &_Int{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_Int__ReprAssembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2, nil
	case "float":
		ma.state = maState_midValue
		ma.ca = 3
		x := &_Float{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Float__ReprAssembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3, nil
	case "string":
		ma.state = maState_midValue
		ma.ca = 4
		x := &_String{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_String__ReprAssembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4, nil
	case "bytes":
		ma.state = maState_midValue
		ma.ca = 5
		x := &_Bytes{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Bytes__ReprAssembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5, nil
	case "map":
		ma.state = maState_midValue
		ma.ca = 6
		x := &_Map{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Map__ReprAssembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6, nil
	case "list":
		ma.state = maState_midValue
		ma.ca = 7
		x := &_List{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_List__ReprAssembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7, nil
	case "link":
		ma.state = maState_midValue
		ma.ca = 8
		x := &_Link{}
		ma.w.x = x
		if ma.ca8 == nil {
			ma.ca8 = &_Link__ReprAssembler{}
		}
		ma.ca8.w = x
		ma.ca8.m = &ma.cm
		return ma.ca8, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName: "hamt.Any.Repr", Key: &_String{k}}
	}
}
func (ma *_Any__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Any__ReprKeyAssembler)(ma)
}
func (ma *_Any__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 0:
		x := &_Bool{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_Bool__ReprAssembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1
	case 1:
		x := &_Int{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_Int__ReprAssembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2
	case 2:
		x := &_Float{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Float__ReprAssembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3
	case 3:
		x := &_String{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_String__ReprAssembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4
	case 4:
		x := &_Bytes{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Bytes__ReprAssembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5
	case 5:
		x := &_Map{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Map__ReprAssembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6
	case 6:
		x := &_List{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_List__ReprAssembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7
	case 7:
		x := &_Link{}
		ma.w.x = x
		if ma.ca8 == nil {
			ma.ca8 = &_Link__ReprAssembler{}
		}
		ma.ca8.w = x
		ma.ca8.m = &ma.cm
		return ma.ca8
	default:
		panic("unreachable")
	}
}
func (ma *_Any__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName: "hamt.Any.Repr", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Any__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Any__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	switch k {
	case "Bool":
		return _Bool__ReprPrototype{}
	case "Int":
		return _Int__ReprPrototype{}
	case "Float":
		return _Float__ReprPrototype{}
	case "String":
		return _String__ReprPrototype{}
	case "Bytes":
		return _Bytes__ReprPrototype{}
	case "Map":
		return _Map__ReprPrototype{}
	case "List":
		return _List__ReprPrototype{}
	case "Link":
		return _Link__ReprPrototype{}
	default:
		return nil
	}
}

type _Any__ReprKeyAssembler _Any__ReprAssembler

func (_Any__ReprKeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"hamt.Any.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Any__ReprKeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"hamt.Any.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Any__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"hamt.Any.Repr.KeyAssembler"}.AssignNull()
}
func (_Any__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"hamt.Any.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Any__ReprKeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"hamt.Any.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Any__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"hamt.Any.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Any__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName: "hamt.Any.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "bool":
		ka.ca = 1
		ka.state = maState_expectValue
		return nil
	case "int":
		ka.ca = 2
		ka.state = maState_expectValue
		return nil
	case "float":
		ka.ca = 3
		ka.state = maState_expectValue
		return nil
	case "string":
		ka.ca = 4
		ka.state = maState_expectValue
		return nil
	case "bytes":
		ka.ca = 5
		ka.state = maState_expectValue
		return nil
	case "map":
		ka.ca = 6
		ka.state = maState_expectValue
		return nil
	case "list":
		ka.ca = 7
		ka.state = maState_expectValue
		return nil
	case "link":
		ka.ca = 8
		ka.state = maState_expectValue
		return nil
	default:
		return ipld.ErrInvalidKey{TypeName: "hamt.Any.Repr", Key: &_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
	}
	return nil
}
func (_Any__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"hamt.Any.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Any__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"hamt.Any.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Any__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Any__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
