package hamt

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

func (n _Any) AsInterface() _Any__iface {
	return n.x
}

type _Any__Maybe struct {
	m schema.Maybe
	v Any
}
type MaybeAny = *_Any__Maybe

func (m MaybeAny) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeAny) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeAny) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeAny) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeAny) Must() Any {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	memberName__Any_Bool   = _String{"Bool"}
	memberName__Any_Int    = _String{"Int"}
	memberName__Any_Float  = _String{"Float"}
	memberName__Any_String = _String{"String"}
	memberName__Any_Bytes  = _String{"Bytes"}
	memberName__Any_Map    = _String{"Map"}
	memberName__Any_List   = _String{"List"}
	memberName__Any_Link   = _String{"Link"}
)
var _ ipld.Node = (Any)(&_Any{})
var _ schema.TypedNode = (Any)(&_Any{})

func (Any) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n Any) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Bool":
		if n2, ok := n.x.(Bool); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Int":
		if n2, ok := n.x.(Int); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Float":
		if n2, ok := n.x.(Float); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "String":
		if n2, ok := n.x.(String); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Bytes":
		if n2, ok := n.x.(Bytes); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Map":
		if n2, ok := n.x.(Map); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "List":
		if n2, ok := n.x.(List); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Link":
		if n2, ok := n.x.(Link); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n Any) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Any) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "hamt.Any"}.LookupByIndex(0)
}
func (n Any) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Any) MapIterator() ipld.MapIterator {
	return &_Any__MapItr{n, false}
}

type _Any__MapItr struct {
	n    Any
	done bool
}

func (itr *_Any__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.done {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch n2 := itr.n.x.(type) {
	case Bool:
		k, v = &memberName__Any_Bool, n2
	case Int:
		k, v = &memberName__Any_Int, n2
	case Float:
		k, v = &memberName__Any_Float, n2
	case String:
		k, v = &memberName__Any_String, n2
	case Bytes:
		k, v = &memberName__Any_Bytes, n2
	case Map:
		k, v = &memberName__Any_Map, n2
	case List:
		k, v = &memberName__Any_List, n2
	case Link:
		k, v = &memberName__Any_Link, n2
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_Any__MapItr) Done() bool {
	return itr.done
}

func (Any) ListIterator() ipld.ListIterator {
	return nil
}
func (Any) Length() int64 {
	return 1
}
func (Any) IsAbsent() bool {
	return false
}
func (Any) IsNull() bool {
	return false
}
func (Any) AsBool() (bool, error) {
	return mixins.Map{TypeName: "hamt.Any"}.AsBool()
}
func (Any) AsInt() (int64, error) {
	return mixins.Map{TypeName: "hamt.Any"}.AsInt()
}
func (Any) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "hamt.Any"}.AsFloat()
}
func (Any) AsString() (string, error) {
	return mixins.Map{TypeName: "hamt.Any"}.AsString()
}
func (Any) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "hamt.Any"}.AsBytes()
}
func (Any) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "hamt.Any"}.AsLink()
}
func (Any) Prototype() ipld.NodePrototype {
	return _Any__Prototype{}
}

type _Any__Prototype struct{}

func (_Any__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Any__Builder
	nb.Reset()
	return &nb
}

type _Any__Builder struct {
	_Any__Assembler
}

func (nb *_Any__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Any__Builder) Reset() {
	var w _Any
	var m schema.Maybe
	*nb = _Any__Builder{_Any__Assembler{w: &w, m: &m}}
}

type _Any__Assembler struct {
	w     *_Any
	m     *schema.Maybe
	state maState

	cm  schema.Maybe
	ca1 *_Bool__Assembler

	ca2 *_Int__Assembler

	ca3 *_Float__Assembler

	ca4 *_String__Assembler

	ca5 *_Bytes__Assembler

	ca6 *_Map__Assembler

	ca7 *_List__Assembler

	ca8 *_Link__Assembler
	ca  uint
}

func (na *_Any__Assembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()

	case 2:
		na.ca2.reset()

	case 3:
		na.ca3.reset()

	case 4:
		na.ca4.reset()

	case 5:
		na.ca5.reset()

	case 6:
		na.ca6.reset()

	case 7:
		na.ca7.reset()

	case 8:
		na.ca8.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
	na.cm = schema.Maybe_Absent
}
func (na *_Any__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Any{}
	}
	return na, nil
}
func (_Any__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "hamt.Any"}.BeginList(0)
}
func (na *_Any__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "hamt.Any"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Any__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "hamt.Any"}.AssignBool(false)
}
func (_Any__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "hamt.Any"}.AssignInt(0)
}
func (_Any__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "hamt.Any"}.AssignFloat(0)
}
func (_Any__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "hamt.Any"}.AssignString("")
}
func (_Any__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "hamt.Any"}.AssignBytes(nil)
}
func (_Any__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "hamt.Any"}.AssignLink(nil)
}
func (na *_Any__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Any); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "hamt.Any", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Any__Assembler) Prototype() ipld.NodePrototype {
	return _Any__Prototype{}
}
func (ma *_Any__Assembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_Any__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName: "hamt.Any", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "Bool":
		ma.state = maState_midValue
		ma.ca = 1
		x := &_Bool{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_Bool__Assembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1, nil
	case "Int":
		ma.state = maState_midValue
		ma.ca = 2
		x := &_Int{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_Int__Assembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2, nil
	case "Float":
		ma.state = maState_midValue
		ma.ca = 3
		x := &_Float{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Float__Assembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3, nil
	case "String":
		ma.state = maState_midValue
		ma.ca = 4
		x := &_String{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_String__Assembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4, nil
	case "Bytes":
		ma.state = maState_midValue
		ma.ca = 5
		x := &_Bytes{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Bytes__Assembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5, nil
	case "Map":
		ma.state = maState_midValue
		ma.ca = 6
		x := &_Map{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Map__Assembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6, nil
	case "List":
		ma.state = maState_midValue
		ma.ca = 7
		x := &_List{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_List__Assembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7, nil
	case "Link":
		ma.state = maState_midValue
		ma.ca = 8
		x := &_Link{}
		ma.w.x = x
		if ma.ca8 == nil {
			ma.ca8 = &_Link__Assembler{}
		}
		ma.ca8.w = x
		ma.ca8.m = &ma.cm
		return ma.ca8, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName: "hamt.Any", Key: &_String{k}}
}
func (ma *_Any__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Any__KeyAssembler)(ma)
}
func (ma *_Any__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 0:
		x := &_Bool{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_Bool__Assembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1
	case 1:
		x := &_Int{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_Int__Assembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2
	case 2:
		x := &_Float{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Float__Assembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3
	case 3:
		x := &_String{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_String__Assembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4
	case 4:
		x := &_Bytes{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Bytes__Assembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5
	case 5:
		x := &_Map{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Map__Assembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6
	case 6:
		x := &_List{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_List__Assembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7
	case 7:
		x := &_Link{}
		ma.w.x = x
		if ma.ca8 == nil {
			ma.ca8 = &_Link__Assembler{}
		}
		ma.ca8.w = x
		ma.ca8.m = &ma.cm
		return ma.ca8
	default:
		panic("unreachable")
	}
}
func (ma *_Any__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName: "hamt.Any", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Any__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Any__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	switch k {
	case "Bool":
		return _Bool__Prototype{}
	case "Int":
		return _Int__Prototype{}
	case "Float":
		return _Float__Prototype{}
	case "String":
		return _String__Prototype{}
	case "Bytes":
		return _Bytes__Prototype{}
	case "Map":
		return _Map__Prototype{}
	case "List":
		return _List__Prototype{}
	case "Link":
		return _Link__Prototype{}
	default:
		return nil
	}
}

type _Any__KeyAssembler _Any__Assembler

func (_Any__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "hamt.Any.KeyAssembler"}.BeginMap(0)
}
func (_Any__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "hamt.Any.KeyAssembler"}.BeginList(0)
}
func (na *_Any__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "hamt.Any.KeyAssembler"}.AssignNull()
}
func (_Any__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "hamt.Any.KeyAssembler"}.AssignBool(false)
}
func (_Any__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "hamt.Any.KeyAssembler"}.AssignInt(0)
}
func (_Any__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "hamt.Any.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Any__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName: "hamt.Any", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "Bool":
		ka.ca = 1
		ka.state = maState_expectValue
		return nil
	case "Int":
		ka.ca = 2
		ka.state = maState_expectValue
		return nil
	case "Float":
		ka.ca = 3
		ka.state = maState_expectValue
		return nil
	case "String":
		ka.ca = 4
		ka.state = maState_expectValue
		return nil
	case "Bytes":
		ka.ca = 5
		ka.state = maState_expectValue
		return nil
	case "Map":
		ka.ca = 6
		ka.state = maState_expectValue
		return nil
	case "List":
		ka.ca = 7
		ka.state = maState_expectValue
		return nil
	case "Link":
		ka.ca = 8
		ka.state = maState_expectValue
		return nil
	}
	return ipld.ErrInvalidKey{TypeName: "hamt.Any", Key: &_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
}
func (_Any__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "hamt.Any.KeyAssembler"}.AssignBytes(nil)
}
func (_Any__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "hamt.Any.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Any__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Any__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (Any) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Any) Representation() ipld.Node {
	return (*_Any__Repr)(n)
}

type _Any__Repr _Any

var _ ipld.Node = &_Any__Repr{}

func (n *_Any__Repr) Kind() ipld.Kind {
	switch n.x.(type) {
	case Bool:
		return ipld.Kind_Bool
	case Int:
		return ipld.Kind_Int
	case Float:
		return ipld.Kind_Float
	case String:
		return ipld.Kind_String
	case Bytes:
		return ipld.Kind_Bytes
	case Map:
		return ipld.Kind_Map
	case List:
		return ipld.Kind_List
	case Link:
		return ipld.Kind_Link
	default:
		panic("unreachable")
	}
}
func (n *_Any__Repr) LookupByString(key string) (ipld.Node, error) {
	switch n2 := n.x.(type) {
	case Map:
		return n2.Representation().LookupByString(key)
	default:
		return nil, ipld.ErrWrongKind{TypeName: "hamt.Any.Repr", MethodName: "LookupByString", AppropriateKind: ipld.KindSet_JustMap, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	switch n2 := n.x.(type) {
	case Map:
		return n2.Representation().LookupByNode(key)
	case List:
		return n2.Representation().LookupByNode(key)
	default:
		return nil, ipld.ErrWrongKind{TypeName: "hamt.Any.Repr", MethodName: "LookupByNode", AppropriateKind: ipld.KindSet_Recursive, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	switch n2 := n.x.(type) {
	case List:
		return n2.Representation().LookupByIndex(idx)
	default:
		return nil, ipld.ErrWrongKind{TypeName: "hamt.Any.Repr", MethodName: "LookupByIndex", AppropriateKind: ipld.KindSet_JustList, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	switch n2 := n.x.(type) {
	case Map:
		return n2.Representation().LookupBySegment(seg)
	case List:
		return n2.Representation().LookupBySegment(seg)
	default:
		return nil, ipld.ErrWrongKind{TypeName: "hamt.Any.Repr", MethodName: "LookupBySegment", AppropriateKind: ipld.KindSet_Recursive, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) MapIterator() ipld.MapIterator {
	switch n2 := n.x.(type) {
	case Map:
		return n2.Representation().MapIterator()
	default:
		return nil
	}
}
func (n *_Any__Repr) ListIterator() ipld.ListIterator {
	switch n2 := n.x.(type) {
	case List:
		return n2.Representation().ListIterator()
	default:
		return nil
	}
}
func (n *_Any__Repr) Length() int64 {
	switch n2 := n.x.(type) {
	case Map:
		return n2.Representation().Length()
	case List:
		return n2.Representation().Length()
	default:
		return -1
	}
}
func (n *_Any__Repr) IsAbsent() bool {
	return false
}
func (n *_Any__Repr) IsNull() bool {
	return false
}
func (n *_Any__Repr) AsBool() (bool, error) {
	switch n2 := n.x.(type) {
	case Bool:
		return n2.Representation().AsBool()
	default:
		return false, ipld.ErrWrongKind{TypeName: "hamt.Any.Repr", MethodName: "AsBool", AppropriateKind: ipld.KindSet_JustBool, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) AsInt() (int64, error) {
	switch n2 := n.x.(type) {
	case Int:
		return n2.Representation().AsInt()
	default:
		return 0, ipld.ErrWrongKind{TypeName: "hamt.Any.Repr", MethodName: "AsInt", AppropriateKind: ipld.KindSet_JustInt, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) AsFloat() (float64, error) {
	switch n2 := n.x.(type) {
	case Float:
		return n2.Representation().AsFloat()
	default:
		return 0, ipld.ErrWrongKind{TypeName: "hamt.Any.Repr", MethodName: "AsFloat", AppropriateKind: ipld.KindSet_JustFloat, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) AsString() (string, error) {
	switch n2 := n.x.(type) {
	case String:
		return n2.Representation().AsString()
	default:
		return "", ipld.ErrWrongKind{TypeName: "hamt.Any.Repr", MethodName: "AsString", AppropriateKind: ipld.KindSet_JustString, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) AsBytes() ([]byte, error) {
	switch n2 := n.x.(type) {
	case Bytes:
		return n2.Representation().AsBytes()
	default:
		return nil, ipld.ErrWrongKind{TypeName: "hamt.Any.Repr", MethodName: "AsBytes", AppropriateKind: ipld.KindSet_JustBytes, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) AsLink() (ipld.Link, error) {
	switch n2 := n.x.(type) {
	case Link:
		return n2.Representation().AsLink()
	default:
		return nil, ipld.ErrWrongKind{TypeName: "hamt.Any.Repr", MethodName: "AsLink", AppropriateKind: ipld.KindSet_JustLink, ActualKind: n.Kind()}
	}
}
func (_Any__Repr) Prototype() ipld.NodePrototype {
	return _Any__ReprPrototype{}
}

type _Any__ReprPrototype struct{}

func (_Any__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Any__ReprBuilder
	nb.Reset()
	return &nb
}

type _Any__ReprBuilder struct {
	_Any__ReprAssembler
}

func (nb *_Any__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Any__ReprBuilder) Reset() {
	var w _Any
	var m schema.Maybe
	*nb = _Any__ReprBuilder{_Any__ReprAssembler{w: &w, m: &m}}
}

type _Any__ReprAssembler struct {
	w   *_Any
	m   *schema.Maybe
	ca1 *_Bool__ReprAssembler
	ca2 *_Int__ReprAssembler
	ca3 *_Float__ReprAssembler
	ca4 *_String__ReprAssembler
	ca5 *_Bytes__ReprAssembler
	ca6 *_Map__ReprAssembler
	ca7 *_List__ReprAssembler
	ca8 *_Link__ReprAssembler
	ca  uint
}

func (na *_Any__ReprAssembler) reset() {
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()
	case 2:
		na.ca2.reset()
	case 3:
		na.ca3.reset()
	case 4:
		na.ca4.reset()
	case 5:
		na.ca5.reset()
	case 6:
		na.ca6.reset()
	case 7:
		na.ca7.reset()
	case 8:
		na.ca8.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
}
func (na *_Any__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 6
	x := &_Map{}
	na.w.x = x
	if na.ca6 == nil {
		na.ca6 = &_Map__ReprAssembler{}
	}
	na.ca6.w = x
	na.ca6.m = na.m
	return na.ca6.BeginMap(sizeHint)
}
func (na *_Any__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 7
	x := &_List{}
	na.w.x = x
	if na.ca7 == nil {
		na.ca7 = &_List__ReprAssembler{}
	}
	na.ca7.w = x
	na.ca7.m = na.m
	return na.ca7.BeginList(sizeHint)
}
func (na *_Any__ReprAssembler) AssignNull() error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return schema.ErrNotUnionStructure{TypeName: "hamt.Any.Repr", Detail: "AssignNull called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Any__ReprAssembler) AssignBool(v bool) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 1
	x := &_Bool{}
	na.w.x = x
	if na.ca1 == nil {
		na.ca1 = &_Bool__ReprAssembler{}
	}
	na.ca1.w = x
	na.ca1.m = na.m
	return na.ca1.AssignBool(v)
}
func (na *_Any__ReprAssembler) AssignInt(v int64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 2
	x := &_Int{}
	na.w.x = x
	if na.ca2 == nil {
		na.ca2 = &_Int__ReprAssembler{}
	}
	na.ca2.w = x
	na.ca2.m = na.m
	return na.ca2.AssignInt(v)
}
func (na *_Any__ReprAssembler) AssignFloat(v float64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 3
	x := &_Float{}
	na.w.x = x
	if na.ca3 == nil {
		na.ca3 = &_Float__ReprAssembler{}
	}
	na.ca3.w = x
	na.ca3.m = na.m
	return na.ca3.AssignFloat(v)
}
func (na *_Any__ReprAssembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 4
	x := &_String{}
	na.w.x = x
	if na.ca4 == nil {
		na.ca4 = &_String__ReprAssembler{}
	}
	na.ca4.w = x
	na.ca4.m = na.m
	return na.ca4.AssignString(v)
}
func (na *_Any__ReprAssembler) AssignBytes(v []byte) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 5
	x := &_Bytes{}
	na.w.x = x
	if na.ca5 == nil {
		na.ca5 = &_Bytes__ReprAssembler{}
	}
	na.ca5.w = x
	na.ca5.m = na.m
	return na.ca5.AssignBytes(v)
}
func (na *_Any__ReprAssembler) AssignLink(v ipld.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 8
	x := &_Link{}
	na.w.x = x
	if na.ca8 == nil {
		na.ca8 = &_Link__ReprAssembler{}
	}
	na.ca8.w = x
	na.ca8.m = na.m
	return na.ca8.AssignLink(v)
}
func (na *_Any__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Any); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	switch v.Kind() {
	case ipld.Kind_Bool:
		v2, _ := v.AsBool()
		return na.AssignBool(v2)
	case ipld.Kind_Int:
		v2, _ := v.AsInt()
		return na.AssignInt(v2)
	case ipld.Kind_Float:
		v2, _ := v.AsFloat()
		return na.AssignFloat(v2)
	case ipld.Kind_String:
		v2, _ := v.AsString()
		return na.AssignString(v2)
	case ipld.Kind_Bytes:
		v2, _ := v.AsBytes()
		return na.AssignBytes(v2)
	case ipld.Kind_Map:
		na, err := na.BeginMap(v.Length())
		if err != nil {
			return err
		}
		itr := v.MapIterator()
		for !itr.Done() {
			k, v, err := itr.Next()
			if err != nil {
				return err
			}
			if err := na.AssembleKey().AssignNode(k); err != nil {
				return err
			}
			if err := na.AssembleValue().AssignNode(v); err != nil {
				return err
			}
		}
		return na.Finish()
	case ipld.Kind_List:
		na, err := na.BeginList(v.Length())
		if err != nil {
			return err
		}
		itr := v.ListIterator()
		for !itr.Done() {
			_, v, err := itr.Next()
			if err != nil {
				return err
			}
			if err := na.AssembleValue().AssignNode(v); err != nil {
				return err
			}
		}
		return na.Finish()
	case ipld.Kind_Link:
		v2, _ := v.AsLink()
		return na.AssignLink(v2)
	default:
		panic("unreachable")
	}
}
func (na *_Any__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Any__ReprPrototype{}
}

func (n Bool) Bool() bool {
	return n.x
}
func (_Bool__Prototype) FromBool(v bool) (Bool, error) {
	n := _Bool{v}
	return &n, nil
}

type _Bool__Maybe struct {
	m schema.Maybe
	v _Bool
}
type MaybeBool = *_Bool__Maybe

func (m MaybeBool) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeBool) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeBool) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeBool) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeBool) Must() Bool {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ ipld.Node = (Bool)(&_Bool{})
var _ schema.TypedNode = (Bool)(&_Bool{})

func (Bool) Kind() ipld.Kind {
	return ipld.Kind_Bool
}
func (Bool) LookupByString(string) (ipld.Node, error) {
	return mixins.Bool{TypeName: "hamt.Bool"}.LookupByString("")
}
func (Bool) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Bool{TypeName: "hamt.Bool"}.LookupByNode(nil)
}
func (Bool) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Bool{TypeName: "hamt.Bool"}.LookupByIndex(0)
}
func (Bool) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Bool{TypeName: "hamt.Bool"}.LookupBySegment(seg)
}
func (Bool) MapIterator() ipld.MapIterator {
	return nil
}
func (Bool) ListIterator() ipld.ListIterator {
	return nil
}
func (Bool) Length() int64 {
	return -1
}
func (Bool) IsAbsent() bool {
	return false
}
func (Bool) IsNull() bool {
	return false
}
func (n Bool) AsBool() (bool, error) {
	return n.x, nil
}
func (Bool) AsInt() (int64, error) {
	return mixins.Bool{TypeName: "hamt.Bool"}.AsInt()
}
func (Bool) AsFloat() (float64, error) {
	return mixins.Bool{TypeName: "hamt.Bool"}.AsFloat()
}
func (Bool) AsString() (string, error) {
	return mixins.Bool{TypeName: "hamt.Bool"}.AsString()
}
func (Bool) AsBytes() ([]byte, error) {
	return mixins.Bool{TypeName: "hamt.Bool"}.AsBytes()
}
func (Bool) AsLink() (ipld.Link, error) {
	return mixins.Bool{TypeName: "hamt.Bool"}.AsLink()
}
func (Bool) Prototype() ipld.NodePrototype {
	return _Bool__Prototype{}
}

type _Bool__Prototype struct{}

func (_Bool__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Bool__Builder
	nb.Reset()
	return &nb
}

type _Bool__Builder struct {
	_Bool__Assembler
}

func (nb *_Bool__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Bool__Builder) Reset() {
	var w _Bool
	var m schema.Maybe
	*nb = _Bool__Builder{_Bool__Assembler{w: &w, m: &m}}
}

type _Bool__Assembler struct {
	w *_Bool
	m *schema.Maybe
}

func (na *_Bool__Assembler) reset() {}
func (_Bool__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.BoolAssembler{TypeName: "hamt.Bool"}.BeginMap(0)
}
func (_Bool__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.BoolAssembler{TypeName: "hamt.Bool"}.BeginList(0)
}
func (na *_Bool__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.BoolAssembler{TypeName: "hamt.Bool"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (na *_Bool__Assembler) AssignBool(v bool) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Bool__Assembler) AssignInt(int64) error {
	return mixins.BoolAssembler{TypeName: "hamt.Bool"}.AssignInt(0)
}
func (_Bool__Assembler) AssignFloat(float64) error {
	return mixins.BoolAssembler{TypeName: "hamt.Bool"}.AssignFloat(0)
}
func (_Bool__Assembler) AssignString(string) error {
	return mixins.BoolAssembler{TypeName: "hamt.Bool"}.AssignString("")
}
func (_Bool__Assembler) AssignBytes([]byte) error {
	return mixins.BoolAssembler{TypeName: "hamt.Bool"}.AssignBytes(nil)
}
func (_Bool__Assembler) AssignLink(ipld.Link) error {
	return mixins.BoolAssembler{TypeName: "hamt.Bool"}.AssignLink(nil)
}
func (na *_Bool__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Bool); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsBool(); err != nil {
		return err
	} else {
		return na.AssignBool(v2)
	}
}
func (_Bool__Assembler) Prototype() ipld.NodePrototype {
	return _Bool__Prototype{}
}
func (Bool) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Bool) Representation() ipld.Node {
	return (*_Bool__Repr)(n)
}

type _Bool__Repr = _Bool

var _ ipld.Node = &_Bool__Repr{}

type _Bool__ReprPrototype = _Bool__Prototype
type _Bool__ReprAssembler = _Bool__Assembler

func (n *_Bucket) Lookup(idx int64) BucketEntry {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}
func (n *_Bucket) LookupMaybe(idx int64) MaybeBucketEntry {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return &_BucketEntry__Maybe{
		m: schema.Maybe_Value,
		v: v,
	}
}

var _Bucket__valueAbsent = _BucketEntry__Maybe{m: schema.Maybe_Absent}

func (n Bucket) Iterator() *Bucket__Itr {
	return &Bucket__Itr{n, 0}
}

type Bucket__Itr struct {
	n   Bucket
	idx int
}

func (itr *Bucket__Itr) Next() (idx int64, v BucketEntry) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *Bucket__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _Bucket__Maybe struct {
	m schema.Maybe
	v _Bucket
}
type MaybeBucket = *_Bucket__Maybe

func (m MaybeBucket) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeBucket) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeBucket) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeBucket) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeBucket) Must() Bucket {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ ipld.Node = (Bucket)(&_Bucket{})
var _ schema.TypedNode = (Bucket)(&_Bucket{})

func (Bucket) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (Bucket) LookupByString(string) (ipld.Node, error) {
	return mixins.List{TypeName: "hamt.Bucket"}.LookupByString("")
}
func (n Bucket) LookupByNode(k ipld.Node) (ipld.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n Bucket) LookupByIndex(idx int64) (ipld.Node, error) {
	if n.Length() <= idx {
		return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	return v, nil
}
func (n Bucket) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "hamt.Bucket", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (Bucket) MapIterator() ipld.MapIterator {
	return nil
}
func (n Bucket) ListIterator() ipld.ListIterator {
	return &_Bucket__ListItr{n, 0}
}

type _Bucket__ListItr struct {
	n   Bucket
	idx int
}

func (itr *_Bucket__ListItr) Next() (idx int64, v ipld.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	v = x
	itr.idx++
	return
}
func (itr *_Bucket__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n Bucket) Length() int64 {
	return int64(len(n.x))
}
func (Bucket) IsAbsent() bool {
	return false
}
func (Bucket) IsNull() bool {
	return false
}
func (Bucket) AsBool() (bool, error) {
	return mixins.List{TypeName: "hamt.Bucket"}.AsBool()
}
func (Bucket) AsInt() (int64, error) {
	return mixins.List{TypeName: "hamt.Bucket"}.AsInt()
}
func (Bucket) AsFloat() (float64, error) {
	return mixins.List{TypeName: "hamt.Bucket"}.AsFloat()
}
func (Bucket) AsString() (string, error) {
	return mixins.List{TypeName: "hamt.Bucket"}.AsString()
}
func (Bucket) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "hamt.Bucket"}.AsBytes()
}
func (Bucket) AsLink() (ipld.Link, error) {
	return mixins.List{TypeName: "hamt.Bucket"}.AsLink()
}
func (Bucket) Prototype() ipld.NodePrototype {
	return _Bucket__Prototype{}
}

type _Bucket__Prototype struct{}

func (_Bucket__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Bucket__Builder
	nb.Reset()
	return &nb
}

type _Bucket__Builder struct {
	_Bucket__Assembler
}

func (nb *_Bucket__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Bucket__Builder) Reset() {
	var w _Bucket
	var m schema.Maybe
	*nb = _Bucket__Builder{_Bucket__Assembler{w: &w, m: &m}}
}

type _Bucket__Assembler struct {
	w     *_Bucket
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _BucketEntry__Assembler
}

func (na *_Bucket__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_Bucket__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "hamt.Bucket"}.BeginMap(0)
}
func (na *_Bucket__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_BucketEntry, 0, sizeHint)
	}
	return na, nil
}
func (na *_Bucket__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "hamt.Bucket"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Bucket__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "hamt.Bucket"}.AssignBool(false)
}
func (_Bucket__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "hamt.Bucket"}.AssignInt(0)
}
func (_Bucket__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "hamt.Bucket"}.AssignFloat(0)
}
func (_Bucket__Assembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "hamt.Bucket"}.AssignString("")
}
func (_Bucket__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "hamt.Bucket"}.AssignBytes(nil)
}
func (_Bucket__Assembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{TypeName: "hamt.Bucket"}.AssignLink(nil)
}
func (na *_Bucket__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Bucket); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "hamt.Bucket", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Bucket__Assembler) Prototype() ipld.NodePrototype {
	return _Bucket__Prototype{}
}
func (la *_Bucket__Assembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_Bucket__Assembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _BucketEntry{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_Bucket__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_Bucket__Assembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _BucketEntry__Prototype{}
}
func (Bucket) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Bucket) Representation() ipld.Node {
	return (*_Bucket__Repr)(n)
}

type _Bucket__Repr _Bucket

var _ ipld.Node = &_Bucket__Repr{}

func (_Bucket__Repr) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (_Bucket__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{TypeName: "hamt.Bucket.Repr"}.LookupByString("")
}
func (nr *_Bucket__Repr) LookupByNode(k ipld.Node) (ipld.Node, error) {
	v, err := (Bucket)(nr).LookupByNode(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(BucketEntry).Representation(), nil
}
func (nr *_Bucket__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	v, err := (Bucket)(nr).LookupByIndex(idx)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(BucketEntry).Representation(), nil
}
func (n _Bucket__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "hamt.Bucket.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_Bucket__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (nr *_Bucket__Repr) ListIterator() ipld.ListIterator {
	return &_Bucket__ReprListItr{(Bucket)(nr), 0}
}

type _Bucket__ReprListItr _Bucket__ListItr

func (itr *_Bucket__ReprListItr) Next() (idx int64, v ipld.Node, err error) {
	idx, v, err = (*_Bucket__ListItr)(itr).Next()
	if err != nil || v == ipld.Null {
		return
	}
	return idx, v.(BucketEntry).Representation(), nil
}
func (itr *_Bucket__ReprListItr) Done() bool {
	return (*_Bucket__ListItr)(itr).Done()
}

func (rn *_Bucket__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_Bucket__Repr) IsAbsent() bool {
	return false
}
func (_Bucket__Repr) IsNull() bool {
	return false
}
func (_Bucket__Repr) AsBool() (bool, error) {
	return mixins.List{TypeName: "hamt.Bucket.Repr"}.AsBool()
}
func (_Bucket__Repr) AsInt() (int64, error) {
	return mixins.List{TypeName: "hamt.Bucket.Repr"}.AsInt()
}
func (_Bucket__Repr) AsFloat() (float64, error) {
	return mixins.List{TypeName: "hamt.Bucket.Repr"}.AsFloat()
}
func (_Bucket__Repr) AsString() (string, error) {
	return mixins.List{TypeName: "hamt.Bucket.Repr"}.AsString()
}
func (_Bucket__Repr) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "hamt.Bucket.Repr"}.AsBytes()
}
func (_Bucket__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{TypeName: "hamt.Bucket.Repr"}.AsLink()
}
func (_Bucket__Repr) Prototype() ipld.NodePrototype {
	return _Bucket__ReprPrototype{}
}

type _Bucket__ReprPrototype struct{}

func (_Bucket__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Bucket__ReprBuilder
	nb.Reset()
	return &nb
}

type _Bucket__ReprBuilder struct {
	_Bucket__ReprAssembler
}

func (nb *_Bucket__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Bucket__ReprBuilder) Reset() {
	var w _Bucket
	var m schema.Maybe
	*nb = _Bucket__ReprBuilder{_Bucket__ReprAssembler{w: &w, m: &m}}
}

type _Bucket__ReprAssembler struct {
	w     *_Bucket
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _BucketEntry__ReprAssembler
}

func (na *_Bucket__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_Bucket__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "hamt.Bucket.Repr"}.BeginMap(0)
}
func (na *_Bucket__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_BucketEntry, 0, sizeHint)
	}
	return na, nil
}
func (na *_Bucket__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "hamt.Bucket.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Bucket__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "hamt.Bucket.Repr"}.AssignBool(false)
}
func (_Bucket__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "hamt.Bucket.Repr"}.AssignInt(0)
}
func (_Bucket__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "hamt.Bucket.Repr"}.AssignFloat(0)
}
func (_Bucket__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "hamt.Bucket.Repr"}.AssignString("")
}
func (_Bucket__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "hamt.Bucket.Repr"}.AssignBytes(nil)
}
func (_Bucket__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{TypeName: "hamt.Bucket.Repr"}.AssignLink(nil)
}
func (na *_Bucket__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Bucket); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "hamt.Bucket.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Bucket__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Bucket__ReprPrototype{}
}
func (la *_Bucket__ReprAssembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_Bucket__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _BucketEntry{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_Bucket__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_Bucket__ReprAssembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _BucketEntry__ReprPrototype{}
}

func (n _BucketEntry) FieldKey() Bytes {
	return &n.key
}
func (n _BucketEntry) FieldValue() Any {
	return &n.value
}

type _BucketEntry__Maybe struct {
	m schema.Maybe
	v BucketEntry
}
type MaybeBucketEntry = *_BucketEntry__Maybe

func (m MaybeBucketEntry) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeBucketEntry) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeBucketEntry) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeBucketEntry) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeBucketEntry) Must() BucketEntry {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__BucketEntry_Key   = _String{"key"}
	fieldName__BucketEntry_Value = _String{"value"}
)
var _ ipld.Node = (BucketEntry)(&_BucketEntry{})
var _ schema.TypedNode = (BucketEntry)(&_BucketEntry{})

func (BucketEntry) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n BucketEntry) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "key":
		return &n.key, nil
	case "value":
		return &n.value, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n BucketEntry) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (BucketEntry) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "hamt.BucketEntry"}.LookupByIndex(0)
}
func (n BucketEntry) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n BucketEntry) MapIterator() ipld.MapIterator {
	return &_BucketEntry__MapItr{n, 0}
}

type _BucketEntry__MapItr struct {
	n   BucketEntry
	idx int
}

func (itr *_BucketEntry__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 2 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__BucketEntry_Key
		v = &itr.n.key
	case 1:
		k = &fieldName__BucketEntry_Value
		v = &itr.n.value
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_BucketEntry__MapItr) Done() bool {
	return itr.idx >= 2
}

func (BucketEntry) ListIterator() ipld.ListIterator {
	return nil
}
func (BucketEntry) Length() int64 {
	return 2
}
func (BucketEntry) IsAbsent() bool {
	return false
}
func (BucketEntry) IsNull() bool {
	return false
}
func (BucketEntry) AsBool() (bool, error) {
	return mixins.Map{TypeName: "hamt.BucketEntry"}.AsBool()
}
func (BucketEntry) AsInt() (int64, error) {
	return mixins.Map{TypeName: "hamt.BucketEntry"}.AsInt()
}
func (BucketEntry) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "hamt.BucketEntry"}.AsFloat()
}
func (BucketEntry) AsString() (string, error) {
	return mixins.Map{TypeName: "hamt.BucketEntry"}.AsString()
}
func (BucketEntry) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "hamt.BucketEntry"}.AsBytes()
}
func (BucketEntry) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "hamt.BucketEntry"}.AsLink()
}
func (BucketEntry) Prototype() ipld.NodePrototype {
	return _BucketEntry__Prototype{}
}

type _BucketEntry__Prototype struct{}

func (_BucketEntry__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _BucketEntry__Builder
	nb.Reset()
	return &nb
}

type _BucketEntry__Builder struct {
	_BucketEntry__Assembler
}

func (nb *_BucketEntry__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_BucketEntry__Builder) Reset() {
	var w _BucketEntry
	var m schema.Maybe
	*nb = _BucketEntry__Builder{_BucketEntry__Assembler{w: &w, m: &m}}
}

type _BucketEntry__Assembler struct {
	w     *_BucketEntry
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm       schema.Maybe
	ca_key   _Bytes__Assembler
	ca_value _Any__Assembler
}

func (na *_BucketEntry__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_key.reset()
	na.ca_value.reset()
}

var (
	fieldBit__BucketEntry_Key         = 1 << 0
	fieldBit__BucketEntry_Value       = 1 << 1
	fieldBits__BucketEntry_sufficient = 0 + 1<<0 + 1<<1
)

func (na *_BucketEntry__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_BucketEntry{}
	}
	return na, nil
}
func (_BucketEntry__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "hamt.BucketEntry"}.BeginList(0)
}
func (na *_BucketEntry__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "hamt.BucketEntry"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_BucketEntry__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "hamt.BucketEntry"}.AssignBool(false)
}
func (_BucketEntry__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "hamt.BucketEntry"}.AssignInt(0)
}
func (_BucketEntry__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "hamt.BucketEntry"}.AssignFloat(0)
}
func (_BucketEntry__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "hamt.BucketEntry"}.AssignString("")
}
func (_BucketEntry__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "hamt.BucketEntry"}.AssignBytes(nil)
}
func (_BucketEntry__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "hamt.BucketEntry"}.AssignLink(nil)
}
func (na *_BucketEntry__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_BucketEntry); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "hamt.BucketEntry", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_BucketEntry__Assembler) Prototype() ipld.NodePrototype {
	return _BucketEntry__Prototype{}
}
func (ma *_BucketEntry__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_key.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_value.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_BucketEntry__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "key":
		if ma.s&fieldBit__BucketEntry_Key != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__BucketEntry_Key}
		}
		ma.s += fieldBit__BucketEntry_Key
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_key.w = &ma.w.key
		ma.ca_key.m = &ma.cm
		return &ma.ca_key, nil
	case "value":
		if ma.s&fieldBit__BucketEntry_Value != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__BucketEntry_Value}
		}
		ma.s += fieldBit__BucketEntry_Value
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_value.w = &ma.w.value
		ma.ca_value.m = &ma.cm
		return &ma.ca_value, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName: "hamt.BucketEntry", Key: &_String{k}}
}
func (ma *_BucketEntry__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_BucketEntry__KeyAssembler)(ma)
}
func (ma *_BucketEntry__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_key.w = &ma.w.key
		ma.ca_key.m = &ma.cm
		return &ma.ca_key
	case 1:
		ma.ca_value.w = &ma.w.value
		ma.ca_value.m = &ma.cm
		return &ma.ca_value
	default:
		panic("unreachable")
	}
}
func (ma *_BucketEntry__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__BucketEntry_sufficient != fieldBits__BucketEntry_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__BucketEntry_Key == 0 {
			err.Missing = append(err.Missing, "key")
		}
		if ma.s&fieldBit__BucketEntry_Value == 0 {
			err.Missing = append(err.Missing, "value")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_BucketEntry__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_BucketEntry__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _BucketEntry__KeyAssembler _BucketEntry__Assembler

func (_BucketEntry__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "hamt.BucketEntry.KeyAssembler"}.BeginMap(0)
}
func (_BucketEntry__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "hamt.BucketEntry.KeyAssembler"}.BeginList(0)
}
func (na *_BucketEntry__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "hamt.BucketEntry.KeyAssembler"}.AssignNull()
}
func (_BucketEntry__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "hamt.BucketEntry.KeyAssembler"}.AssignBool(false)
}
func (_BucketEntry__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "hamt.BucketEntry.KeyAssembler"}.AssignInt(0)
}
func (_BucketEntry__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "hamt.BucketEntry.KeyAssembler"}.AssignFloat(0)
}
func (ka *_BucketEntry__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "key":
		if ka.s&fieldBit__BucketEntry_Key != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__BucketEntry_Key}
		}
		ka.s += fieldBit__BucketEntry_Key
		ka.state = maState_expectValue
		ka.f = 0
	case "value":
		if ka.s&fieldBit__BucketEntry_Value != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__BucketEntry_Value}
		}
		ka.s += fieldBit__BucketEntry_Value
		ka.state = maState_expectValue
		ka.f = 1
	default:
		return ipld.ErrInvalidKey{TypeName: "hamt.BucketEntry", Key: &_String{k}}
	}
	return nil
}
func (_BucketEntry__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "hamt.BucketEntry.KeyAssembler"}.AssignBytes(nil)
}
func (_BucketEntry__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "hamt.BucketEntry.KeyAssembler"}.AssignLink(nil)
}
func (ka *_BucketEntry__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_BucketEntry__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (BucketEntry) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n BucketEntry) Representation() ipld.Node {
	return (*_BucketEntry__Repr)(n)
}

type _BucketEntry__Repr _BucketEntry

var _ ipld.Node = &_BucketEntry__Repr{}

func (_BucketEntry__Repr) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (_BucketEntry__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{TypeName: "hamt.BucketEntry.Repr"}.LookupByString("")
}
func (n *_BucketEntry__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_BucketEntry__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	switch idx {
	case 0:
		return n.key.Representation(), nil
	case 1:
		return n.value.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _BucketEntry__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "hamt.BucketEntry.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_BucketEntry__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_BucketEntry__Repr) ListIterator() ipld.ListIterator {
	return &_BucketEntry__ReprListItr{n, 0}
}

type _BucketEntry__ReprListItr struct {
	n   *_BucketEntry__Repr
	idx int
}

func (itr *_BucketEntry__ReprListItr) Next() (idx int64, v ipld.Node, err error) {
	if itr.idx >= 2 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = int64(itr.idx)
		v = itr.n.key.Representation()
	case 1:
		idx = int64(itr.idx)
		v = itr.n.value.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_BucketEntry__ReprListItr) Done() bool {
	return itr.idx >= 2
}

func (rn *_BucketEntry__Repr) Length() int64 {
	l := 2
	return int64(l)
}
func (_BucketEntry__Repr) IsAbsent() bool {
	return false
}
func (_BucketEntry__Repr) IsNull() bool {
	return false
}
func (_BucketEntry__Repr) AsBool() (bool, error) {
	return mixins.List{TypeName: "hamt.BucketEntry.Repr"}.AsBool()
}
func (_BucketEntry__Repr) AsInt() (int64, error) {
	return mixins.List{TypeName: "hamt.BucketEntry.Repr"}.AsInt()
}
func (_BucketEntry__Repr) AsFloat() (float64, error) {
	return mixins.List{TypeName: "hamt.BucketEntry.Repr"}.AsFloat()
}
func (_BucketEntry__Repr) AsString() (string, error) {
	return mixins.List{TypeName: "hamt.BucketEntry.Repr"}.AsString()
}
func (_BucketEntry__Repr) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "hamt.BucketEntry.Repr"}.AsBytes()
}
func (_BucketEntry__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{TypeName: "hamt.BucketEntry.Repr"}.AsLink()
}
func (_BucketEntry__Repr) Prototype() ipld.NodePrototype {
	return _BucketEntry__ReprPrototype{}
}

type _BucketEntry__ReprPrototype struct{}

func (_BucketEntry__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _BucketEntry__ReprBuilder
	nb.Reset()
	return &nb
}

type _BucketEntry__ReprBuilder struct {
	_BucketEntry__ReprAssembler
}

func (nb *_BucketEntry__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_BucketEntry__ReprBuilder) Reset() {
	var w _BucketEntry
	var m schema.Maybe
	*nb = _BucketEntry__ReprBuilder{_BucketEntry__ReprAssembler{w: &w, m: &m}}
}

type _BucketEntry__ReprAssembler struct {
	w     *_BucketEntry
	m     *schema.Maybe
	state laState
	f     int

	cm       schema.Maybe
	ca_key   _Bytes__ReprAssembler
	ca_value _Any__ReprAssembler
}

func (na *_BucketEntry__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca_key.reset()
	na.ca_value.reset()
}
func (_BucketEntry__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "hamt.BucketEntry.Repr"}.BeginMap(0)
}
func (na *_BucketEntry__ReprAssembler) BeginList(int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_BucketEntry{}
	}
	return na, nil
}
func (na *_BucketEntry__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "hamt.BucketEntry.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_BucketEntry__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "hamt.BucketEntry.Repr"}.AssignBool(false)
}
func (_BucketEntry__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "hamt.BucketEntry.Repr"}.AssignInt(0)
}
func (_BucketEntry__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "hamt.BucketEntry.Repr"}.AssignFloat(0)
}
func (_BucketEntry__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "hamt.BucketEntry.Repr"}.AssignString("")
}
func (_BucketEntry__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "hamt.BucketEntry.Repr"}.AssignBytes(nil)
}
func (_BucketEntry__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{TypeName: "hamt.BucketEntry.Repr"}.AssignLink(nil)
}
func (na *_BucketEntry__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_BucketEntry); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "hamt.BucketEntry.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_BucketEntry__ReprAssembler) Prototype() ipld.NodePrototype {
	return _BucketEntry__ReprPrototype{}
}
func (la *_BucketEntry__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_BucketEntry__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 2 {
		return _ErrorThunkAssembler{schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(2)}}
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca_key.w = &la.w.key
		la.ca_key.m = &la.cm
		return &la.ca_key
	case 1:
		la.ca_value.w = &la.w.value
		la.ca_value.m = &la.cm
		return &la.ca_value
	default:
		panic("unreachable")
	}
}
func (la *_BucketEntry__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_BucketEntry__ReprAssembler) ValuePrototype(_ int64) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}

func (n Bytes) Bytes() []byte {
	return n.x
}
func (_Bytes__Prototype) FromBytes(v []byte) (Bytes, error) {
	n := _Bytes{v}
	return &n, nil
}

type _Bytes__Maybe struct {
	m schema.Maybe
	v _Bytes
}
type MaybeBytes = *_Bytes__Maybe

func (m MaybeBytes) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeBytes) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeBytes) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeBytes) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeBytes) Must() Bytes {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ ipld.Node = (Bytes)(&_Bytes{})
var _ schema.TypedNode = (Bytes)(&_Bytes{})

func (Bytes) Kind() ipld.Kind {
	return ipld.Kind_Bytes
}
func (Bytes) LookupByString(string) (ipld.Node, error) {
	return mixins.Bytes{TypeName: "hamt.Bytes"}.LookupByString("")
}
func (Bytes) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Bytes{TypeName: "hamt.Bytes"}.LookupByNode(nil)
}
func (Bytes) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Bytes{TypeName: "hamt.Bytes"}.LookupByIndex(0)
}
func (Bytes) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Bytes{TypeName: "hamt.Bytes"}.LookupBySegment(seg)
}
func (Bytes) MapIterator() ipld.MapIterator {
	return nil
}
func (Bytes) ListIterator() ipld.ListIterator {
	return nil
}
func (Bytes) Length() int64 {
	return -1
}
func (Bytes) IsAbsent() bool {
	return false
}
func (Bytes) IsNull() bool {
	return false
}
func (Bytes) AsBool() (bool, error) {
	return mixins.Bytes{TypeName: "hamt.Bytes"}.AsBool()
}
func (Bytes) AsInt() (int64, error) {
	return mixins.Bytes{TypeName: "hamt.Bytes"}.AsInt()
}
func (Bytes) AsFloat() (float64, error) {
	return mixins.Bytes{TypeName: "hamt.Bytes"}.AsFloat()
}
func (Bytes) AsString() (string, error) {
	return mixins.Bytes{TypeName: "hamt.Bytes"}.AsString()
}
func (n Bytes) AsBytes() ([]byte, error) {
	return n.x, nil
}
func (Bytes) AsLink() (ipld.Link, error) {
	return mixins.Bytes{TypeName: "hamt.Bytes"}.AsLink()
}
func (Bytes) Prototype() ipld.NodePrototype {
	return _Bytes__Prototype{}
}

type _Bytes__Prototype struct{}

func (_Bytes__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Bytes__Builder
	nb.Reset()
	return &nb
}

type _Bytes__Builder struct {
	_Bytes__Assembler
}

func (nb *_Bytes__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Bytes__Builder) Reset() {
	var w _Bytes
	var m schema.Maybe
	*nb = _Bytes__Builder{_Bytes__Assembler{w: &w, m: &m}}
}

type _Bytes__Assembler struct {
	w *_Bytes
	m *schema.Maybe
}

func (na *_Bytes__Assembler) reset() {}
func (_Bytes__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.BytesAssembler{TypeName: "hamt.Bytes"}.BeginMap(0)
}
func (_Bytes__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.BytesAssembler{TypeName: "hamt.Bytes"}.BeginList(0)
}
func (na *_Bytes__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.BytesAssembler{TypeName: "hamt.Bytes"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Bytes__Assembler) AssignBool(bool) error {
	return mixins.BytesAssembler{TypeName: "hamt.Bytes"}.AssignBool(false)
}
func (_Bytes__Assembler) AssignInt(int64) error {
	return mixins.BytesAssembler{TypeName: "hamt.Bytes"}.AssignInt(0)
}
func (_Bytes__Assembler) AssignFloat(float64) error {
	return mixins.BytesAssembler{TypeName: "hamt.Bytes"}.AssignFloat(0)
}
func (_Bytes__Assembler) AssignString(string) error {
	return mixins.BytesAssembler{TypeName: "hamt.Bytes"}.AssignString("")
}
func (na *_Bytes__Assembler) AssignBytes(v []byte) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Bytes__Assembler) AssignLink(ipld.Link) error {
	return mixins.BytesAssembler{TypeName: "hamt.Bytes"}.AssignLink(nil)
}
func (na *_Bytes__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Bytes); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsBytes(); err != nil {
		return err
	} else {
		return na.AssignBytes(v2)
	}
}
func (_Bytes__Assembler) Prototype() ipld.NodePrototype {
	return _Bytes__Prototype{}
}
func (Bytes) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Bytes) Representation() ipld.Node {
	return (*_Bytes__Repr)(n)
}

type _Bytes__Repr = _Bytes

var _ ipld.Node = &_Bytes__Repr{}

type _Bytes__ReprPrototype = _Bytes__Prototype
type _Bytes__ReprAssembler = _Bytes__Assembler

func (n _Element) AsInterface() _Element__iface {
	return n.x
}

type _Element__Maybe struct {
	m schema.Maybe
	v Element
}
type MaybeElement = *_Element__Maybe

func (m MaybeElement) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeElement) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeElement) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeElement) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeElement) Must() Element {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	memberName__Element_Link__HashMapNode = _String{"Link__HashMapNode"}
	memberName__Element_Bucket            = _String{"Bucket"}
)
var _ ipld.Node = (Element)(&_Element{})
var _ schema.TypedNode = (Element)(&_Element{})

func (Element) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n Element) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Link__HashMapNode":
		if n2, ok := n.x.(Link__HashMapNode); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	case "Bucket":
		if n2, ok := n.x.(Bucket); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n Element) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Element) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "hamt.Element"}.LookupByIndex(0)
}
func (n Element) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Element) MapIterator() ipld.MapIterator {
	return &_Element__MapItr{n, false}
}

type _Element__MapItr struct {
	n    Element
	done bool
}

func (itr *_Element__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.done {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch n2 := itr.n.x.(type) {
	case Link__HashMapNode:
		k, v = &memberName__Element_Link__HashMapNode, n2
	case Bucket:
		k, v = &memberName__Element_Bucket, n2
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_Element__MapItr) Done() bool {
	return itr.done
}

func (Element) ListIterator() ipld.ListIterator {
	return nil
}
func (Element) Length() int64 {
	return 1
}
func (Element) IsAbsent() bool {
	return false
}
func (Element) IsNull() bool {
	return false
}
func (Element) AsBool() (bool, error) {
	return mixins.Map{TypeName: "hamt.Element"}.AsBool()
}
func (Element) AsInt() (int64, error) {
	return mixins.Map{TypeName: "hamt.Element"}.AsInt()
}
func (Element) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "hamt.Element"}.AsFloat()
}
func (Element) AsString() (string, error) {
	return mixins.Map{TypeName: "hamt.Element"}.AsString()
}
func (Element) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "hamt.Element"}.AsBytes()
}
func (Element) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "hamt.Element"}.AsLink()
}
func (Element) Prototype() ipld.NodePrototype {
	return _Element__Prototype{}
}

type _Element__Prototype struct{}

func (_Element__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Element__Builder
	nb.Reset()
	return &nb
}

type _Element__Builder struct {
	_Element__Assembler
}

func (nb *_Element__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Element__Builder) Reset() {
	var w _Element
	var m schema.Maybe
	*nb = _Element__Builder{_Element__Assembler{w: &w, m: &m}}
}

type _Element__Assembler struct {
	w     *_Element
	m     *schema.Maybe
	state maState

	cm  schema.Maybe
	ca1 *_Link__HashMapNode__Assembler

	ca2 *_Bucket__Assembler
	ca  uint
}

func (na *_Element__Assembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()

	case 2:
		na.ca2.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
	na.cm = schema.Maybe_Absent
}
func (na *_Element__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Element{}
	}
	return na, nil
}
func (_Element__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "hamt.Element"}.BeginList(0)
}
func (na *_Element__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "hamt.Element"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Element__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "hamt.Element"}.AssignBool(false)
}
func (_Element__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "hamt.Element"}.AssignInt(0)
}
func (_Element__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "hamt.Element"}.AssignFloat(0)
}
func (_Element__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "hamt.Element"}.AssignString("")
}
func (_Element__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "hamt.Element"}.AssignBytes(nil)
}
func (_Element__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "hamt.Element"}.AssignLink(nil)
}
func (na *_Element__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Element); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "hamt.Element", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Element__Assembler) Prototype() ipld.NodePrototype {
	return _Element__Prototype{}
}
func (ma *_Element__Assembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_Element__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName: "hamt.Element", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "Link__HashMapNode":
		ma.state = maState_midValue
		ma.ca = 1
		x := &_Link__HashMapNode{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_Link__HashMapNode__Assembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1, nil
	case "Bucket":
		ma.state = maState_midValue
		ma.ca = 2
		x := &_Bucket{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_Bucket__Assembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName: "hamt.Element", Key: &_String{k}}
}
func (ma *_Element__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Element__KeyAssembler)(ma)
}
func (ma *_Element__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 0:
		x := &_Link__HashMapNode{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_Link__HashMapNode__Assembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1
	case 1:
		x := &_Bucket{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_Bucket__Assembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2
	default:
		panic("unreachable")
	}
}
func (ma *_Element__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName: "hamt.Element", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Element__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Element__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	switch k {
	case "Link__HashMapNode":
		return _Link__HashMapNode__Prototype{}
	case "Bucket":
		return _Bucket__Prototype{}
	default:
		return nil
	}
}

type _Element__KeyAssembler _Element__Assembler

func (_Element__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "hamt.Element.KeyAssembler"}.BeginMap(0)
}
func (_Element__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "hamt.Element.KeyAssembler"}.BeginList(0)
}
func (na *_Element__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "hamt.Element.KeyAssembler"}.AssignNull()
}
func (_Element__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "hamt.Element.KeyAssembler"}.AssignBool(false)
}
func (_Element__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "hamt.Element.KeyAssembler"}.AssignInt(0)
}
func (_Element__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "hamt.Element.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Element__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName: "hamt.Element", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "Link__HashMapNode":
		ka.ca = 1
		ka.state = maState_expectValue
		return nil
	case "Bucket":
		ka.ca = 2
		ka.state = maState_expectValue
		return nil
	}
	return ipld.ErrInvalidKey{TypeName: "hamt.Element", Key: &_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
}
func (_Element__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "hamt.Element.KeyAssembler"}.AssignBytes(nil)
}
func (_Element__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "hamt.Element.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Element__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Element__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (Element) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Element) Representation() ipld.Node {
	return (*_Element__Repr)(n)
}

type _Element__Repr _Element

var _ ipld.Node = &_Element__Repr{}

func (n *_Element__Repr) Kind() ipld.Kind {
	switch n.x.(type) {
	case Link__HashMapNode:
		return ipld.Kind_Link
	case Bucket:
		return ipld.Kind_List
	default:
		panic("unreachable")
	}
}
func (n *_Element__Repr) LookupByString(key string) (ipld.Node, error) {
	return nil, ipld.ErrWrongKind{TypeName: "hamt.Element.Repr", MethodName: "LookupByString", AppropriateKind: ipld.KindSet_JustMap, ActualKind: n.Kind()}
}
func (n *_Element__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	switch n2 := n.x.(type) {
	case Bucket:
		return n2.Representation().LookupByNode(key)
	default:
		return nil, ipld.ErrWrongKind{TypeName: "hamt.Element.Repr", MethodName: "LookupByNode", AppropriateKind: ipld.KindSet_Recursive, ActualKind: n.Kind()}
	}
}
func (n *_Element__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	switch n2 := n.x.(type) {
	case Bucket:
		return n2.Representation().LookupByIndex(idx)
	default:
		return nil, ipld.ErrWrongKind{TypeName: "hamt.Element.Repr", MethodName: "LookupByIndex", AppropriateKind: ipld.KindSet_JustList, ActualKind: n.Kind()}
	}
}
func (n *_Element__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	switch n2 := n.x.(type) {
	case Bucket:
		return n2.Representation().LookupBySegment(seg)
	default:
		return nil, ipld.ErrWrongKind{TypeName: "hamt.Element.Repr", MethodName: "LookupBySegment", AppropriateKind: ipld.KindSet_Recursive, ActualKind: n.Kind()}
	}
}
func (n *_Element__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_Element__Repr) ListIterator() ipld.ListIterator {
	switch n2 := n.x.(type) {
	case Bucket:
		return n2.Representation().ListIterator()
	default:
		return nil
	}
}
func (n *_Element__Repr) Length() int64 {
	switch n2 := n.x.(type) {
	case Bucket:
		return n2.Representation().Length()
	default:
		return -1
	}
}
func (n *_Element__Repr) IsAbsent() bool {
	return false
}
func (n *_Element__Repr) IsNull() bool {
	return false
}
func (n *_Element__Repr) AsBool() (bool, error) {
	return false, ipld.ErrWrongKind{TypeName: "hamt.Element.Repr", MethodName: "AsBool", AppropriateKind: ipld.KindSet_JustBool, ActualKind: n.Kind()}
}
func (n *_Element__Repr) AsInt() (int64, error) {
	return 0, ipld.ErrWrongKind{TypeName: "hamt.Element.Repr", MethodName: "AsInt", AppropriateKind: ipld.KindSet_JustInt, ActualKind: n.Kind()}
}
func (n *_Element__Repr) AsFloat() (float64, error) {
	return 0, ipld.ErrWrongKind{TypeName: "hamt.Element.Repr", MethodName: "AsFloat", AppropriateKind: ipld.KindSet_JustFloat, ActualKind: n.Kind()}
}
func (n *_Element__Repr) AsString() (string, error) {
	return "", ipld.ErrWrongKind{TypeName: "hamt.Element.Repr", MethodName: "AsString", AppropriateKind: ipld.KindSet_JustString, ActualKind: n.Kind()}
}
func (n *_Element__Repr) AsBytes() ([]byte, error) {
	return nil, ipld.ErrWrongKind{TypeName: "hamt.Element.Repr", MethodName: "AsBytes", AppropriateKind: ipld.KindSet_JustBytes, ActualKind: n.Kind()}
}
func (n *_Element__Repr) AsLink() (ipld.Link, error) {
	switch n2 := n.x.(type) {
	case Link__HashMapNode:
		return n2.Representation().AsLink()
	default:
		return nil, ipld.ErrWrongKind{TypeName: "hamt.Element.Repr", MethodName: "AsLink", AppropriateKind: ipld.KindSet_JustLink, ActualKind: n.Kind()}
	}
}
func (_Element__Repr) Prototype() ipld.NodePrototype {
	return _Element__ReprPrototype{}
}

type _Element__ReprPrototype struct{}

func (_Element__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Element__ReprBuilder
	nb.Reset()
	return &nb
}

type _Element__ReprBuilder struct {
	_Element__ReprAssembler
}

func (nb *_Element__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Element__ReprBuilder) Reset() {
	var w _Element
	var m schema.Maybe
	*nb = _Element__ReprBuilder{_Element__ReprAssembler{w: &w, m: &m}}
}

type _Element__ReprAssembler struct {
	w   *_Element
	m   *schema.Maybe
	ca1 *_Link__HashMapNode__ReprAssembler
	ca2 *_Bucket__ReprAssembler
	ca  uint
}

func (na *_Element__ReprAssembler) reset() {
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()
	case 2:
		na.ca2.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
}
func (na *_Element__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return nil, schema.ErrNotUnionStructure{TypeName: "hamt.Element.Repr", Detail: "BeginMap called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Element__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Element{}
	}
	na.ca = 2
	x := &_Bucket{}
	na.w.x = x
	if na.ca2 == nil {
		na.ca2 = &_Bucket__ReprAssembler{}
	}
	na.ca2.w = x
	na.ca2.m = na.m
	return na.ca2.BeginList(sizeHint)
}
func (na *_Element__ReprAssembler) AssignNull() error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return schema.ErrNotUnionStructure{TypeName: "hamt.Element.Repr", Detail: "AssignNull called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Element__ReprAssembler) AssignBool(v bool) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return schema.ErrNotUnionStructure{TypeName: "hamt.Element.Repr", Detail: "AssignBool called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Element__ReprAssembler) AssignInt(v int64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return schema.ErrNotUnionStructure{TypeName: "hamt.Element.Repr", Detail: "AssignInt called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Element__ReprAssembler) AssignFloat(v float64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return schema.ErrNotUnionStructure{TypeName: "hamt.Element.Repr", Detail: "AssignFloat called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Element__ReprAssembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return schema.ErrNotUnionStructure{TypeName: "hamt.Element.Repr", Detail: "AssignString called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Element__ReprAssembler) AssignBytes(v []byte) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return schema.ErrNotUnionStructure{TypeName: "hamt.Element.Repr", Detail: "AssignBytes called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Element__ReprAssembler) AssignLink(v ipld.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Element{}
	}
	na.ca = 1
	x := &_Link__HashMapNode{}
	na.w.x = x
	if na.ca1 == nil {
		na.ca1 = &_Link__HashMapNode__ReprAssembler{}
	}
	na.ca1.w = x
	na.ca1.m = na.m
	return na.ca1.AssignLink(v)
}
func (na *_Element__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Element); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	switch v.Kind() {
	case ipld.Kind_Bool:
		v2, _ := v.AsBool()
		return na.AssignBool(v2)
	case ipld.Kind_Int:
		v2, _ := v.AsInt()
		return na.AssignInt(v2)
	case ipld.Kind_Float:
		v2, _ := v.AsFloat()
		return na.AssignFloat(v2)
	case ipld.Kind_String:
		v2, _ := v.AsString()
		return na.AssignString(v2)
	case ipld.Kind_Bytes:
		v2, _ := v.AsBytes()
		return na.AssignBytes(v2)
	case ipld.Kind_Map:
		na, err := na.BeginMap(v.Length())
		if err != nil {
			return err
		}
		itr := v.MapIterator()
		for !itr.Done() {
			k, v, err := itr.Next()
			if err != nil {
				return err
			}
			if err := na.AssembleKey().AssignNode(k); err != nil {
				return err
			}
			if err := na.AssembleValue().AssignNode(v); err != nil {
				return err
			}
		}
		return na.Finish()
	case ipld.Kind_List:
		na, err := na.BeginList(v.Length())
		if err != nil {
			return err
		}
		itr := v.ListIterator()
		for !itr.Done() {
			_, v, err := itr.Next()
			if err != nil {
				return err
			}
			if err := na.AssembleValue().AssignNode(v); err != nil {
				return err
			}
		}
		return na.Finish()
	case ipld.Kind_Link:
		v2, _ := v.AsLink()
		return na.AssignLink(v2)
	default:
		panic("unreachable")
	}
}
func (na *_Element__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Element__ReprPrototype{}
}

func (n Float) Float() float64 {
	return n.x
}
func (_Float__Prototype) FromFloat(v float64) (Float, error) {
	n := _Float{v}
	return &n, nil
}

type _Float__Maybe struct {
	m schema.Maybe
	v _Float
}
type MaybeFloat = *_Float__Maybe

func (m MaybeFloat) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeFloat) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeFloat) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeFloat) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeFloat) Must() Float {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ ipld.Node = (Float)(&_Float{})
var _ schema.TypedNode = (Float)(&_Float{})

func (Float) Kind() ipld.Kind {
	return ipld.Kind_Float
}
func (Float) LookupByString(string) (ipld.Node, error) {
	return mixins.Float{TypeName: "hamt.Float"}.LookupByString("")
}
func (Float) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Float{TypeName: "hamt.Float"}.LookupByNode(nil)
}
func (Float) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Float{TypeName: "hamt.Float"}.LookupByIndex(0)
}
func (Float) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Float{TypeName: "hamt.Float"}.LookupBySegment(seg)
}
func (Float) MapIterator() ipld.MapIterator {
	return nil
}
func (Float) ListIterator() ipld.ListIterator {
	return nil
}
func (Float) Length() int64 {
	return -1
}
func (Float) IsAbsent() bool {
	return false
}
func (Float) IsNull() bool {
	return false
}
func (Float) AsBool() (bool, error) {
	return mixins.Float{TypeName: "hamt.Float"}.AsBool()
}
func (Float) AsInt() (int64, error) {
	return mixins.Float{TypeName: "hamt.Float"}.AsInt()
}
func (n Float) AsFloat() (float64, error) {
	return n.x, nil
}
func (Float) AsString() (string, error) {
	return mixins.Float{TypeName: "hamt.Float"}.AsString()
}
func (Float) AsBytes() ([]byte, error) {
	return mixins.Float{TypeName: "hamt.Float"}.AsBytes()
}
func (Float) AsLink() (ipld.Link, error) {
	return mixins.Float{TypeName: "hamt.Float"}.AsLink()
}
func (Float) Prototype() ipld.NodePrototype {
	return _Float__Prototype{}
}

type _Float__Prototype struct{}

func (_Float__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Float__Builder
	nb.Reset()
	return &nb
}

type _Float__Builder struct {
	_Float__Assembler
}

func (nb *_Float__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Float__Builder) Reset() {
	var w _Float
	var m schema.Maybe
	*nb = _Float__Builder{_Float__Assembler{w: &w, m: &m}}
}

type _Float__Assembler struct {
	w *_Float
	m *schema.Maybe
}

func (na *_Float__Assembler) reset() {}
func (_Float__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.FloatAssembler{TypeName: "hamt.Float"}.BeginMap(0)
}
func (_Float__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.FloatAssembler{TypeName: "hamt.Float"}.BeginList(0)
}
func (na *_Float__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.FloatAssembler{TypeName: "hamt.Float"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Float__Assembler) AssignBool(bool) error {
	return mixins.FloatAssembler{TypeName: "hamt.Float"}.AssignBool(false)
}
func (_Float__Assembler) AssignInt(int64) error {
	return mixins.FloatAssembler{TypeName: "hamt.Float"}.AssignInt(0)
}
func (na *_Float__Assembler) AssignFloat(v float64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Float__Assembler) AssignString(string) error {
	return mixins.FloatAssembler{TypeName: "hamt.Float"}.AssignString("")
}
func (_Float__Assembler) AssignBytes([]byte) error {
	return mixins.FloatAssembler{TypeName: "hamt.Float"}.AssignBytes(nil)
}
func (_Float__Assembler) AssignLink(ipld.Link) error {
	return mixins.FloatAssembler{TypeName: "hamt.Float"}.AssignLink(nil)
}
func (na *_Float__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Float); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsFloat(); err != nil {
		return err
	} else {
		return na.AssignFloat(v2)
	}
}
func (_Float__Assembler) Prototype() ipld.NodePrototype {
	return _Float__Prototype{}
}
func (Float) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Float) Representation() ipld.Node {
	return (*_Float__Repr)(n)
}

type _Float__Repr = _Float

var _ ipld.Node = &_Float__Repr{}

type _Float__ReprPrototype = _Float__Prototype
type _Float__ReprAssembler = _Float__Assembler

func (n _HashMapNode) FieldMap() Bytes {
	return &n._map
}
func (n _HashMapNode) FieldData() List__Element {
	return &n.data
}

type _HashMapNode__Maybe struct {
	m schema.Maybe
	v HashMapNode
}
type MaybeHashMapNode = *_HashMapNode__Maybe

func (m MaybeHashMapNode) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeHashMapNode) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeHashMapNode) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeHashMapNode) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeHashMapNode) Must() HashMapNode {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__HashMapNode_Map  = _String{"map"}
	fieldName__HashMapNode_Data = _String{"data"}
)
var _ ipld.Node = (HashMapNode)(&_HashMapNode{})
var _ schema.TypedNode = (HashMapNode)(&_HashMapNode{})

func (HashMapNode) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n HashMapNode) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "map":
		return &n._map, nil
	case "data":
		return &n.data, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n HashMapNode) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (HashMapNode) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "hamt.HashMapNode"}.LookupByIndex(0)
}
func (n HashMapNode) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n HashMapNode) MapIterator() ipld.MapIterator {
	return &_HashMapNode__MapItr{n, 0}
}

type _HashMapNode__MapItr struct {
	n   HashMapNode
	idx int
}

func (itr *_HashMapNode__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 2 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__HashMapNode_Map
		v = &itr.n._map
	case 1:
		k = &fieldName__HashMapNode_Data
		v = &itr.n.data
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_HashMapNode__MapItr) Done() bool {
	return itr.idx >= 2
}

func (HashMapNode) ListIterator() ipld.ListIterator {
	return nil
}
func (HashMapNode) Length() int64 {
	return 2
}
func (HashMapNode) IsAbsent() bool {
	return false
}
func (HashMapNode) IsNull() bool {
	return false
}
func (HashMapNode) AsBool() (bool, error) {
	return mixins.Map{TypeName: "hamt.HashMapNode"}.AsBool()
}
func (HashMapNode) AsInt() (int64, error) {
	return mixins.Map{TypeName: "hamt.HashMapNode"}.AsInt()
}
func (HashMapNode) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "hamt.HashMapNode"}.AsFloat()
}
func (HashMapNode) AsString() (string, error) {
	return mixins.Map{TypeName: "hamt.HashMapNode"}.AsString()
}
func (HashMapNode) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "hamt.HashMapNode"}.AsBytes()
}
func (HashMapNode) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "hamt.HashMapNode"}.AsLink()
}
func (HashMapNode) Prototype() ipld.NodePrototype {
	return _HashMapNode__Prototype{}
}

type _HashMapNode__Prototype struct{}

func (_HashMapNode__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _HashMapNode__Builder
	nb.Reset()
	return &nb
}

type _HashMapNode__Builder struct {
	_HashMapNode__Assembler
}

func (nb *_HashMapNode__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_HashMapNode__Builder) Reset() {
	var w _HashMapNode
	var m schema.Maybe
	*nb = _HashMapNode__Builder{_HashMapNode__Assembler{w: &w, m: &m}}
}

type _HashMapNode__Assembler struct {
	w     *_HashMapNode
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm      schema.Maybe
	ca__map _Bytes__Assembler
	ca_data _List__Element__Assembler
}

func (na *_HashMapNode__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca__map.reset()
	na.ca_data.reset()
}

var (
	fieldBit__HashMapNode_Map         = 1 << 0
	fieldBit__HashMapNode_Data        = 1 << 1
	fieldBits__HashMapNode_sufficient = 0 + 1<<0 + 1<<1
)

func (na *_HashMapNode__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_HashMapNode{}
	}
	return na, nil
}
func (_HashMapNode__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "hamt.HashMapNode"}.BeginList(0)
}
func (na *_HashMapNode__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "hamt.HashMapNode"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_HashMapNode__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapNode"}.AssignBool(false)
}
func (_HashMapNode__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapNode"}.AssignInt(0)
}
func (_HashMapNode__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapNode"}.AssignFloat(0)
}
func (_HashMapNode__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapNode"}.AssignString("")
}
func (_HashMapNode__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapNode"}.AssignBytes(nil)
}
func (_HashMapNode__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapNode"}.AssignLink(nil)
}
func (na *_HashMapNode__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_HashMapNode); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "hamt.HashMapNode", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_HashMapNode__Assembler) Prototype() ipld.NodePrototype {
	return _HashMapNode__Prototype{}
}
func (ma *_HashMapNode__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca__map.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_data.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_HashMapNode__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "map":
		if ma.s&fieldBit__HashMapNode_Map != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__HashMapNode_Map}
		}
		ma.s += fieldBit__HashMapNode_Map
		ma.state = maState_midValue
		ma.f = 0
		ma.ca__map.w = &ma.w._map
		ma.ca__map.m = &ma.cm
		return &ma.ca__map, nil
	case "data":
		if ma.s&fieldBit__HashMapNode_Data != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__HashMapNode_Data}
		}
		ma.s += fieldBit__HashMapNode_Data
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_data.w = &ma.w.data
		ma.ca_data.m = &ma.cm
		return &ma.ca_data, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName: "hamt.HashMapNode", Key: &_String{k}}
}
func (ma *_HashMapNode__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_HashMapNode__KeyAssembler)(ma)
}
func (ma *_HashMapNode__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca__map.w = &ma.w._map
		ma.ca__map.m = &ma.cm
		return &ma.ca__map
	case 1:
		ma.ca_data.w = &ma.w.data
		ma.ca_data.m = &ma.cm
		return &ma.ca_data
	default:
		panic("unreachable")
	}
}
func (ma *_HashMapNode__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__HashMapNode_sufficient != fieldBits__HashMapNode_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__HashMapNode_Map == 0 {
			err.Missing = append(err.Missing, "map")
		}
		if ma.s&fieldBit__HashMapNode_Data == 0 {
			err.Missing = append(err.Missing, "data")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_HashMapNode__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_HashMapNode__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _HashMapNode__KeyAssembler _HashMapNode__Assembler

func (_HashMapNode__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "hamt.HashMapNode.KeyAssembler"}.BeginMap(0)
}
func (_HashMapNode__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "hamt.HashMapNode.KeyAssembler"}.BeginList(0)
}
func (na *_HashMapNode__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapNode.KeyAssembler"}.AssignNull()
}
func (_HashMapNode__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapNode.KeyAssembler"}.AssignBool(false)
}
func (_HashMapNode__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapNode.KeyAssembler"}.AssignInt(0)
}
func (_HashMapNode__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapNode.KeyAssembler"}.AssignFloat(0)
}
func (ka *_HashMapNode__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "map":
		if ka.s&fieldBit__HashMapNode_Map != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__HashMapNode_Map}
		}
		ka.s += fieldBit__HashMapNode_Map
		ka.state = maState_expectValue
		ka.f = 0
	case "data":
		if ka.s&fieldBit__HashMapNode_Data != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__HashMapNode_Data}
		}
		ka.s += fieldBit__HashMapNode_Data
		ka.state = maState_expectValue
		ka.f = 1
	default:
		return ipld.ErrInvalidKey{TypeName: "hamt.HashMapNode", Key: &_String{k}}
	}
	return nil
}
func (_HashMapNode__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapNode.KeyAssembler"}.AssignBytes(nil)
}
func (_HashMapNode__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapNode.KeyAssembler"}.AssignLink(nil)
}
func (ka *_HashMapNode__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_HashMapNode__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (HashMapNode) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n HashMapNode) Representation() ipld.Node {
	return (*_HashMapNode__Repr)(n)
}

type _HashMapNode__Repr _HashMapNode

var _ ipld.Node = &_HashMapNode__Repr{}

func (_HashMapNode__Repr) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (_HashMapNode__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{TypeName: "hamt.HashMapNode.Repr"}.LookupByString("")
}
func (n *_HashMapNode__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ki, err := key.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(ki)
}
func (n *_HashMapNode__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	switch idx {
	case 0:
		return n._map.Representation(), nil
	case 1:
		return n.data.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(idx)}
	}
}
func (n _HashMapNode__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "hamt.HashMapNode.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_HashMapNode__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (n *_HashMapNode__Repr) ListIterator() ipld.ListIterator {
	return &_HashMapNode__ReprListItr{n, 0}
}

type _HashMapNode__ReprListItr struct {
	n   *_HashMapNode__Repr
	idx int
}

func (itr *_HashMapNode__ReprListItr) Next() (idx int64, v ipld.Node, err error) {
	if itr.idx >= 2 {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		idx = int64(itr.idx)
		v = itr.n._map.Representation()
	case 1:
		idx = int64(itr.idx)
		v = itr.n.data.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_HashMapNode__ReprListItr) Done() bool {
	return itr.idx >= 2
}

func (rn *_HashMapNode__Repr) Length() int64 {
	l := 2
	return int64(l)
}
func (_HashMapNode__Repr) IsAbsent() bool {
	return false
}
func (_HashMapNode__Repr) IsNull() bool {
	return false
}
func (_HashMapNode__Repr) AsBool() (bool, error) {
	return mixins.List{TypeName: "hamt.HashMapNode.Repr"}.AsBool()
}
func (_HashMapNode__Repr) AsInt() (int64, error) {
	return mixins.List{TypeName: "hamt.HashMapNode.Repr"}.AsInt()
}
func (_HashMapNode__Repr) AsFloat() (float64, error) {
	return mixins.List{TypeName: "hamt.HashMapNode.Repr"}.AsFloat()
}
func (_HashMapNode__Repr) AsString() (string, error) {
	return mixins.List{TypeName: "hamt.HashMapNode.Repr"}.AsString()
}
func (_HashMapNode__Repr) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "hamt.HashMapNode.Repr"}.AsBytes()
}
func (_HashMapNode__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{TypeName: "hamt.HashMapNode.Repr"}.AsLink()
}
func (_HashMapNode__Repr) Prototype() ipld.NodePrototype {
	return _HashMapNode__ReprPrototype{}
}

type _HashMapNode__ReprPrototype struct{}

func (_HashMapNode__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _HashMapNode__ReprBuilder
	nb.Reset()
	return &nb
}

type _HashMapNode__ReprBuilder struct {
	_HashMapNode__ReprAssembler
}

func (nb *_HashMapNode__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_HashMapNode__ReprBuilder) Reset() {
	var w _HashMapNode
	var m schema.Maybe
	*nb = _HashMapNode__ReprBuilder{_HashMapNode__ReprAssembler{w: &w, m: &m}}
}

type _HashMapNode__ReprAssembler struct {
	w     *_HashMapNode
	m     *schema.Maybe
	state laState
	f     int

	cm      schema.Maybe
	ca__map _Bytes__ReprAssembler
	ca_data _List__Element__ReprAssembler
}

func (na *_HashMapNode__ReprAssembler) reset() {
	na.state = laState_initial
	na.f = 0
	na.ca__map.reset()
	na.ca_data.reset()
}
func (_HashMapNode__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "hamt.HashMapNode.Repr"}.BeginMap(0)
}
func (na *_HashMapNode__ReprAssembler) BeginList(int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_HashMapNode{}
	}
	return na, nil
}
func (na *_HashMapNode__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "hamt.HashMapNode.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_HashMapNode__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "hamt.HashMapNode.Repr"}.AssignBool(false)
}
func (_HashMapNode__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "hamt.HashMapNode.Repr"}.AssignInt(0)
}
func (_HashMapNode__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "hamt.HashMapNode.Repr"}.AssignFloat(0)
}
func (_HashMapNode__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "hamt.HashMapNode.Repr"}.AssignString("")
}
func (_HashMapNode__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "hamt.HashMapNode.Repr"}.AssignBytes(nil)
}
func (_HashMapNode__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{TypeName: "hamt.HashMapNode.Repr"}.AssignLink(nil)
}
func (na *_HashMapNode__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_HashMapNode); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "hamt.HashMapNode.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_HashMapNode__ReprAssembler) Prototype() ipld.NodePrototype {
	return _HashMapNode__ReprPrototype{}
}
func (la *_HashMapNode__ReprAssembler) valueFinishTidy() bool {
	switch la.f {
	case 0:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	case 1:
		switch la.cm {
		case schema.Maybe_Value:
			la.cm = schema.Maybe_Absent
			la.state = laState_initial
			la.f++
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (la *_HashMapNode__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	if la.f >= 2 {
		return _ErrorThunkAssembler{schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfInt(2)}}
	}
	la.state = laState_midValue
	switch la.f {
	case 0:
		la.ca__map.w = &la.w._map
		la.ca__map.m = &la.cm
		return &la.ca__map
	case 1:
		la.ca_data.w = &la.w.data
		la.ca_data.m = &la.cm
		return &la.ca_data
	default:
		panic("unreachable")
	}
}
func (la *_HashMapNode__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_HashMapNode__ReprAssembler) ValuePrototype(_ int64) ipld.NodePrototype {
	panic("todo structbuilder tuplerepr valueprototype")
}

func (n _HashMapRoot) FieldHashAlg() Int {
	return &n.hashAlg
}
func (n _HashMapRoot) FieldBucketSize() Int {
	return &n.bucketSize
}
func (n _HashMapRoot) FieldHamt() HashMapNode {
	return &n.hamt
}

type _HashMapRoot__Maybe struct {
	m schema.Maybe
	v HashMapRoot
}
type MaybeHashMapRoot = *_HashMapRoot__Maybe

func (m MaybeHashMapRoot) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeHashMapRoot) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeHashMapRoot) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeHashMapRoot) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeHashMapRoot) Must() HashMapRoot {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__HashMapRoot_HashAlg    = _String{"hashAlg"}
	fieldName__HashMapRoot_BucketSize = _String{"bucketSize"}
	fieldName__HashMapRoot_Hamt       = _String{"hamt"}
)
var _ ipld.Node = (HashMapRoot)(&_HashMapRoot{})
var _ schema.TypedNode = (HashMapRoot)(&_HashMapRoot{})

func (HashMapRoot) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n HashMapRoot) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "hashAlg":
		return &n.hashAlg, nil
	case "bucketSize":
		return &n.bucketSize, nil
	case "hamt":
		return &n.hamt, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n HashMapRoot) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (HashMapRoot) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "hamt.HashMapRoot"}.LookupByIndex(0)
}
func (n HashMapRoot) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n HashMapRoot) MapIterator() ipld.MapIterator {
	return &_HashMapRoot__MapItr{n, 0}
}

type _HashMapRoot__MapItr struct {
	n   HashMapRoot
	idx int
}

func (itr *_HashMapRoot__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 3 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__HashMapRoot_HashAlg
		v = &itr.n.hashAlg
	case 1:
		k = &fieldName__HashMapRoot_BucketSize
		v = &itr.n.bucketSize
	case 2:
		k = &fieldName__HashMapRoot_Hamt
		v = &itr.n.hamt
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_HashMapRoot__MapItr) Done() bool {
	return itr.idx >= 3
}

func (HashMapRoot) ListIterator() ipld.ListIterator {
	return nil
}
func (HashMapRoot) Length() int64 {
	return 3
}
func (HashMapRoot) IsAbsent() bool {
	return false
}
func (HashMapRoot) IsNull() bool {
	return false
}
func (HashMapRoot) AsBool() (bool, error) {
	return mixins.Map{TypeName: "hamt.HashMapRoot"}.AsBool()
}
func (HashMapRoot) AsInt() (int64, error) {
	return mixins.Map{TypeName: "hamt.HashMapRoot"}.AsInt()
}
func (HashMapRoot) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "hamt.HashMapRoot"}.AsFloat()
}
func (HashMapRoot) AsString() (string, error) {
	return mixins.Map{TypeName: "hamt.HashMapRoot"}.AsString()
}
func (HashMapRoot) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "hamt.HashMapRoot"}.AsBytes()
}
func (HashMapRoot) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "hamt.HashMapRoot"}.AsLink()
}
func (HashMapRoot) Prototype() ipld.NodePrototype {
	return _HashMapRoot__Prototype{}
}

type _HashMapRoot__Prototype struct{}

func (_HashMapRoot__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _HashMapRoot__Builder
	nb.Reset()
	return &nb
}

type _HashMapRoot__Builder struct {
	_HashMapRoot__Assembler
}

func (nb *_HashMapRoot__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_HashMapRoot__Builder) Reset() {
	var w _HashMapRoot
	var m schema.Maybe
	*nb = _HashMapRoot__Builder{_HashMapRoot__Assembler{w: &w, m: &m}}
}

type _HashMapRoot__Assembler struct {
	w     *_HashMapRoot
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm            schema.Maybe
	ca_hashAlg    _Int__Assembler
	ca_bucketSize _Int__Assembler
	ca_hamt       _HashMapNode__Assembler
}

func (na *_HashMapRoot__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_hashAlg.reset()
	na.ca_bucketSize.reset()
	na.ca_hamt.reset()
}

var (
	fieldBit__HashMapRoot_HashAlg     = 1 << 0
	fieldBit__HashMapRoot_BucketSize  = 1 << 1
	fieldBit__HashMapRoot_Hamt        = 1 << 2
	fieldBits__HashMapRoot_sufficient = 0 + 1<<0 + 1<<1 + 1<<2
)

func (na *_HashMapRoot__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_HashMapRoot{}
	}
	return na, nil
}
func (_HashMapRoot__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "hamt.HashMapRoot"}.BeginList(0)
}
func (na *_HashMapRoot__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "hamt.HashMapRoot"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_HashMapRoot__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapRoot"}.AssignBool(false)
}
func (_HashMapRoot__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapRoot"}.AssignInt(0)
}
func (_HashMapRoot__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapRoot"}.AssignFloat(0)
}
func (_HashMapRoot__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapRoot"}.AssignString("")
}
func (_HashMapRoot__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapRoot"}.AssignBytes(nil)
}
func (_HashMapRoot__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapRoot"}.AssignLink(nil)
}
func (na *_HashMapRoot__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_HashMapRoot); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "hamt.HashMapRoot", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_HashMapRoot__Assembler) Prototype() ipld.NodePrototype {
	return _HashMapRoot__Prototype{}
}
func (ma *_HashMapRoot__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_hashAlg.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_bucketSize.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_hamt.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_HashMapRoot__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "hashAlg":
		if ma.s&fieldBit__HashMapRoot_HashAlg != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__HashMapRoot_HashAlg}
		}
		ma.s += fieldBit__HashMapRoot_HashAlg
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_hashAlg.w = &ma.w.hashAlg
		ma.ca_hashAlg.m = &ma.cm
		return &ma.ca_hashAlg, nil
	case "bucketSize":
		if ma.s&fieldBit__HashMapRoot_BucketSize != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__HashMapRoot_BucketSize}
		}
		ma.s += fieldBit__HashMapRoot_BucketSize
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_bucketSize.w = &ma.w.bucketSize
		ma.ca_bucketSize.m = &ma.cm
		return &ma.ca_bucketSize, nil
	case "hamt":
		if ma.s&fieldBit__HashMapRoot_Hamt != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__HashMapRoot_Hamt}
		}
		ma.s += fieldBit__HashMapRoot_Hamt
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_hamt.w = &ma.w.hamt
		ma.ca_hamt.m = &ma.cm
		return &ma.ca_hamt, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName: "hamt.HashMapRoot", Key: &_String{k}}
}
func (ma *_HashMapRoot__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_HashMapRoot__KeyAssembler)(ma)
}
func (ma *_HashMapRoot__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_hashAlg.w = &ma.w.hashAlg
		ma.ca_hashAlg.m = &ma.cm
		return &ma.ca_hashAlg
	case 1:
		ma.ca_bucketSize.w = &ma.w.bucketSize
		ma.ca_bucketSize.m = &ma.cm
		return &ma.ca_bucketSize
	case 2:
		ma.ca_hamt.w = &ma.w.hamt
		ma.ca_hamt.m = &ma.cm
		return &ma.ca_hamt
	default:
		panic("unreachable")
	}
}
func (ma *_HashMapRoot__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__HashMapRoot_sufficient != fieldBits__HashMapRoot_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__HashMapRoot_HashAlg == 0 {
			err.Missing = append(err.Missing, "hashAlg")
		}
		if ma.s&fieldBit__HashMapRoot_BucketSize == 0 {
			err.Missing = append(err.Missing, "bucketSize")
		}
		if ma.s&fieldBit__HashMapRoot_Hamt == 0 {
			err.Missing = append(err.Missing, "hamt")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_HashMapRoot__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_HashMapRoot__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _HashMapRoot__KeyAssembler _HashMapRoot__Assembler

func (_HashMapRoot__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "hamt.HashMapRoot.KeyAssembler"}.BeginMap(0)
}
func (_HashMapRoot__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "hamt.HashMapRoot.KeyAssembler"}.BeginList(0)
}
func (na *_HashMapRoot__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapRoot.KeyAssembler"}.AssignNull()
}
func (_HashMapRoot__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapRoot.KeyAssembler"}.AssignBool(false)
}
func (_HashMapRoot__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapRoot.KeyAssembler"}.AssignInt(0)
}
func (_HashMapRoot__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapRoot.KeyAssembler"}.AssignFloat(0)
}
func (ka *_HashMapRoot__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "hashAlg":
		if ka.s&fieldBit__HashMapRoot_HashAlg != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__HashMapRoot_HashAlg}
		}
		ka.s += fieldBit__HashMapRoot_HashAlg
		ka.state = maState_expectValue
		ka.f = 0
	case "bucketSize":
		if ka.s&fieldBit__HashMapRoot_BucketSize != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__HashMapRoot_BucketSize}
		}
		ka.s += fieldBit__HashMapRoot_BucketSize
		ka.state = maState_expectValue
		ka.f = 1
	case "hamt":
		if ka.s&fieldBit__HashMapRoot_Hamt != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__HashMapRoot_Hamt}
		}
		ka.s += fieldBit__HashMapRoot_Hamt
		ka.state = maState_expectValue
		ka.f = 2
	default:
		return ipld.ErrInvalidKey{TypeName: "hamt.HashMapRoot", Key: &_String{k}}
	}
	return nil
}
func (_HashMapRoot__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapRoot.KeyAssembler"}.AssignBytes(nil)
}
func (_HashMapRoot__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapRoot.KeyAssembler"}.AssignLink(nil)
}
func (ka *_HashMapRoot__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_HashMapRoot__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (HashMapRoot) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n HashMapRoot) Representation() ipld.Node {
	return (*_HashMapRoot__Repr)(n)
}

type _HashMapRoot__Repr _HashMapRoot

var (
	fieldName__HashMapRoot_HashAlg_serial    = _String{"hashAlg"}
	fieldName__HashMapRoot_BucketSize_serial = _String{"bucketSize"}
	fieldName__HashMapRoot_Hamt_serial       = _String{"hamt"}
)
var _ ipld.Node = &_HashMapRoot__Repr{}

func (_HashMapRoot__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n *_HashMapRoot__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "hashAlg":
		return n.hashAlg.Representation(), nil
	case "bucketSize":
		return n.bucketSize.Representation(), nil
	case "hamt":
		return n.hamt.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_HashMapRoot__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_HashMapRoot__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "hamt.HashMapRoot.Repr"}.LookupByIndex(0)
}
func (n _HashMapRoot__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_HashMapRoot__Repr) MapIterator() ipld.MapIterator {
	return &_HashMapRoot__ReprMapItr{n, 0}
}

type _HashMapRoot__ReprMapItr struct {
	n   *_HashMapRoot__Repr
	idx int
}

func (itr *_HashMapRoot__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 3 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__HashMapRoot_HashAlg_serial
		v = itr.n.hashAlg.Representation()
	case 1:
		k = &fieldName__HashMapRoot_BucketSize_serial
		v = itr.n.bucketSize.Representation()
	case 2:
		k = &fieldName__HashMapRoot_Hamt_serial
		v = itr.n.hamt.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_HashMapRoot__ReprMapItr) Done() bool {
	return itr.idx >= 3
}
func (_HashMapRoot__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_HashMapRoot__Repr) Length() int64 {
	l := 3
	return int64(l)
}
func (_HashMapRoot__Repr) IsAbsent() bool {
	return false
}
func (_HashMapRoot__Repr) IsNull() bool {
	return false
}
func (_HashMapRoot__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "hamt.HashMapRoot.Repr"}.AsBool()
}
func (_HashMapRoot__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "hamt.HashMapRoot.Repr"}.AsInt()
}
func (_HashMapRoot__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "hamt.HashMapRoot.Repr"}.AsFloat()
}
func (_HashMapRoot__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "hamt.HashMapRoot.Repr"}.AsString()
}
func (_HashMapRoot__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "hamt.HashMapRoot.Repr"}.AsBytes()
}
func (_HashMapRoot__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "hamt.HashMapRoot.Repr"}.AsLink()
}
func (_HashMapRoot__Repr) Prototype() ipld.NodePrototype {
	return _HashMapRoot__ReprPrototype{}
}

type _HashMapRoot__ReprPrototype struct{}

func (_HashMapRoot__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _HashMapRoot__ReprBuilder
	nb.Reset()
	return &nb
}

type _HashMapRoot__ReprBuilder struct {
	_HashMapRoot__ReprAssembler
}

func (nb *_HashMapRoot__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_HashMapRoot__ReprBuilder) Reset() {
	var w _HashMapRoot
	var m schema.Maybe
	*nb = _HashMapRoot__ReprBuilder{_HashMapRoot__ReprAssembler{w: &w, m: &m}}
}

type _HashMapRoot__ReprAssembler struct {
	w     *_HashMapRoot
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm            schema.Maybe
	ca_hashAlg    _Int__ReprAssembler
	ca_bucketSize _Int__ReprAssembler
	ca_hamt       _HashMapNode__ReprAssembler
}

func (na *_HashMapRoot__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_hashAlg.reset()
	na.ca_bucketSize.reset()
	na.ca_hamt.reset()
}
func (na *_HashMapRoot__ReprAssembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_HashMapRoot{}
	}
	return na, nil
}
func (_HashMapRoot__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "hamt.HashMapRoot.Repr"}.BeginList(0)
}
func (na *_HashMapRoot__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "hamt.HashMapRoot.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_HashMapRoot__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapRoot.Repr"}.AssignBool(false)
}
func (_HashMapRoot__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapRoot.Repr"}.AssignInt(0)
}
func (_HashMapRoot__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapRoot.Repr"}.AssignFloat(0)
}
func (_HashMapRoot__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapRoot.Repr"}.AssignString("")
}
func (_HashMapRoot__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapRoot.Repr"}.AssignBytes(nil)
}
func (_HashMapRoot__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "hamt.HashMapRoot.Repr"}.AssignLink(nil)
}
func (na *_HashMapRoot__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_HashMapRoot); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "hamt.HashMapRoot.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_HashMapRoot__ReprAssembler) Prototype() ipld.NodePrototype {
	return _HashMapRoot__ReprPrototype{}
}
func (ma *_HashMapRoot__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_HashMapRoot__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "hashAlg":
		if ma.s&fieldBit__HashMapRoot_HashAlg != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__HashMapRoot_HashAlg_serial}
		}
		ma.s += fieldBit__HashMapRoot_HashAlg
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_hashAlg.w = &ma.w.hashAlg
		ma.ca_hashAlg.m = &ma.cm
		return &ma.ca_hashAlg, nil
	case "bucketSize":
		if ma.s&fieldBit__HashMapRoot_BucketSize != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__HashMapRoot_BucketSize_serial}
		}
		ma.s += fieldBit__HashMapRoot_BucketSize
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_bucketSize.w = &ma.w.bucketSize
		ma.ca_bucketSize.m = &ma.cm
		return &ma.ca_bucketSize, nil
	case "hamt":
		if ma.s&fieldBit__HashMapRoot_Hamt != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__HashMapRoot_Hamt_serial}
		}
		ma.s += fieldBit__HashMapRoot_Hamt
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_hamt.w = &ma.w.hamt
		ma.ca_hamt.m = &ma.cm
		return &ma.ca_hamt, nil
	default:
	}
	return nil, ipld.ErrInvalidKey{TypeName: "hamt.HashMapRoot.Repr", Key: &_String{k}}
}
func (ma *_HashMapRoot__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_HashMapRoot__ReprKeyAssembler)(ma)
}
func (ma *_HashMapRoot__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_hashAlg.w = &ma.w.hashAlg
		ma.ca_hashAlg.m = &ma.cm
		return &ma.ca_hashAlg
	case 1:
		ma.ca_bucketSize.w = &ma.w.bucketSize
		ma.ca_bucketSize.m = &ma.cm
		return &ma.ca_bucketSize
	case 2:
		ma.ca_hamt.w = &ma.w.hamt
		ma.ca_hamt.m = &ma.cm
		return &ma.ca_hamt
	default:
		panic("unreachable")
	}
}
func (ma *_HashMapRoot__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__HashMapRoot_sufficient != fieldBits__HashMapRoot_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__HashMapRoot_HashAlg == 0 {
			err.Missing = append(err.Missing, "hashAlg")
		}
		if ma.s&fieldBit__HashMapRoot_BucketSize == 0 {
			err.Missing = append(err.Missing, "bucketSize")
		}
		if ma.s&fieldBit__HashMapRoot_Hamt == 0 {
			err.Missing = append(err.Missing, "hamt")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_HashMapRoot__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_HashMapRoot__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _HashMapRoot__ReprKeyAssembler _HashMapRoot__ReprAssembler

func (_HashMapRoot__ReprKeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "hamt.HashMapRoot.Repr.KeyAssembler"}.BeginMap(0)
}
func (_HashMapRoot__ReprKeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "hamt.HashMapRoot.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_HashMapRoot__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapRoot.Repr.KeyAssembler"}.AssignNull()
}
func (_HashMapRoot__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapRoot.Repr.KeyAssembler"}.AssignBool(false)
}
func (_HashMapRoot__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapRoot.Repr.KeyAssembler"}.AssignInt(0)
}
func (_HashMapRoot__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapRoot.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_HashMapRoot__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "hashAlg":
		if ka.s&fieldBit__HashMapRoot_HashAlg != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__HashMapRoot_HashAlg_serial}
		}
		ka.s += fieldBit__HashMapRoot_HashAlg
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "bucketSize":
		if ka.s&fieldBit__HashMapRoot_BucketSize != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__HashMapRoot_BucketSize_serial}
		}
		ka.s += fieldBit__HashMapRoot_BucketSize
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	case "hamt":
		if ka.s&fieldBit__HashMapRoot_Hamt != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__HashMapRoot_Hamt_serial}
		}
		ka.s += fieldBit__HashMapRoot_Hamt
		ka.state = maState_expectValue
		ka.f = 2
		return nil
	}
	return ipld.ErrInvalidKey{TypeName: "hamt.HashMapRoot.Repr", Key: &_String{k}}
}
func (_HashMapRoot__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapRoot.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_HashMapRoot__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "hamt.HashMapRoot.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_HashMapRoot__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_HashMapRoot__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}

func (n Int) Int() int64 {
	return n.x
}
func (_Int__Prototype) FromInt(v int64) (Int, error) {
	n := _Int{v}
	return &n, nil
}

type _Int__Maybe struct {
	m schema.Maybe
	v _Int
}
type MaybeInt = *_Int__Maybe

func (m MaybeInt) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeInt) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeInt) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeInt) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeInt) Must() Int {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ ipld.Node = (Int)(&_Int{})
var _ schema.TypedNode = (Int)(&_Int{})

func (Int) Kind() ipld.Kind {
	return ipld.Kind_Int
}
func (Int) LookupByString(string) (ipld.Node, error) {
	return mixins.Int{TypeName: "hamt.Int"}.LookupByString("")
}
func (Int) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Int{TypeName: "hamt.Int"}.LookupByNode(nil)
}
func (Int) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Int{TypeName: "hamt.Int"}.LookupByIndex(0)
}
func (Int) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Int{TypeName: "hamt.Int"}.LookupBySegment(seg)
}
func (Int) MapIterator() ipld.MapIterator {
	return nil
}
func (Int) ListIterator() ipld.ListIterator {
	return nil
}
func (Int) Length() int64 {
	return -1
}
func (Int) IsAbsent() bool {
	return false
}
func (Int) IsNull() bool {
	return false
}
func (Int) AsBool() (bool, error) {
	return mixins.Int{TypeName: "hamt.Int"}.AsBool()
}
func (n Int) AsInt() (int64, error) {
	return n.x, nil
}
func (Int) AsFloat() (float64, error) {
	return mixins.Int{TypeName: "hamt.Int"}.AsFloat()
}
func (Int) AsString() (string, error) {
	return mixins.Int{TypeName: "hamt.Int"}.AsString()
}
func (Int) AsBytes() ([]byte, error) {
	return mixins.Int{TypeName: "hamt.Int"}.AsBytes()
}
func (Int) AsLink() (ipld.Link, error) {
	return mixins.Int{TypeName: "hamt.Int"}.AsLink()
}
func (Int) Prototype() ipld.NodePrototype {
	return _Int__Prototype{}
}

type _Int__Prototype struct{}

func (_Int__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Int__Builder
	nb.Reset()
	return &nb
}

type _Int__Builder struct {
	_Int__Assembler
}

func (nb *_Int__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Int__Builder) Reset() {
	var w _Int
	var m schema.Maybe
	*nb = _Int__Builder{_Int__Assembler{w: &w, m: &m}}
}

type _Int__Assembler struct {
	w *_Int
	m *schema.Maybe
}

func (na *_Int__Assembler) reset() {}
func (_Int__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.IntAssembler{TypeName: "hamt.Int"}.BeginMap(0)
}
func (_Int__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.IntAssembler{TypeName: "hamt.Int"}.BeginList(0)
}
func (na *_Int__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.IntAssembler{TypeName: "hamt.Int"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Int__Assembler) AssignBool(bool) error {
	return mixins.IntAssembler{TypeName: "hamt.Int"}.AssignBool(false)
}
func (na *_Int__Assembler) AssignInt(v int64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Int__Assembler) AssignFloat(float64) error {
	return mixins.IntAssembler{TypeName: "hamt.Int"}.AssignFloat(0)
}
func (_Int__Assembler) AssignString(string) error {
	return mixins.IntAssembler{TypeName: "hamt.Int"}.AssignString("")
}
func (_Int__Assembler) AssignBytes([]byte) error {
	return mixins.IntAssembler{TypeName: "hamt.Int"}.AssignBytes(nil)
}
func (_Int__Assembler) AssignLink(ipld.Link) error {
	return mixins.IntAssembler{TypeName: "hamt.Int"}.AssignLink(nil)
}
func (na *_Int__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Int); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsInt(); err != nil {
		return err
	} else {
		return na.AssignInt(v2)
	}
}
func (_Int__Assembler) Prototype() ipld.NodePrototype {
	return _Int__Prototype{}
}
func (Int) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Int) Representation() ipld.Node {
	return (*_Int__Repr)(n)
}

type _Int__Repr = _Int

var _ ipld.Node = &_Int__Repr{}

type _Int__ReprPrototype = _Int__Prototype
type _Int__ReprAssembler = _Int__Assembler

func (n Link) Link() ipld.Link {
	return n.x
}
func (_Link__Prototype) FromLink(v ipld.Link) (Link, error) {
	n := _Link{v}
	return &n, nil
}

type _Link__Maybe struct {
	m schema.Maybe
	v _Link
}
type MaybeLink = *_Link__Maybe

func (m MaybeLink) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLink) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLink) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLink) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeLink) Must() Link {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ ipld.Node = (Link)(&_Link{})
var _ schema.TypedNode = (Link)(&_Link{})

func (Link) Kind() ipld.Kind {
	return ipld.Kind_Link
}
func (Link) LookupByString(string) (ipld.Node, error) {
	return mixins.Link{TypeName: "hamt.Link"}.LookupByString("")
}
func (Link) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Link{TypeName: "hamt.Link"}.LookupByNode(nil)
}
func (Link) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Link{TypeName: "hamt.Link"}.LookupByIndex(0)
}
func (Link) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Link{TypeName: "hamt.Link"}.LookupBySegment(seg)
}
func (Link) MapIterator() ipld.MapIterator {
	return nil
}
func (Link) ListIterator() ipld.ListIterator {
	return nil
}
func (Link) Length() int64 {
	return -1
}
func (Link) IsAbsent() bool {
	return false
}
func (Link) IsNull() bool {
	return false
}
func (Link) AsBool() (bool, error) {
	return mixins.Link{TypeName: "hamt.Link"}.AsBool()
}
func (Link) AsInt() (int64, error) {
	return mixins.Link{TypeName: "hamt.Link"}.AsInt()
}
func (Link) AsFloat() (float64, error) {
	return mixins.Link{TypeName: "hamt.Link"}.AsFloat()
}
func (Link) AsString() (string, error) {
	return mixins.Link{TypeName: "hamt.Link"}.AsString()
}
func (Link) AsBytes() ([]byte, error) {
	return mixins.Link{TypeName: "hamt.Link"}.AsBytes()
}
func (n Link) AsLink() (ipld.Link, error) {
	return n.x, nil
}
func (Link) Prototype() ipld.NodePrototype {
	return _Link__Prototype{}
}

type _Link__Prototype struct{}

func (_Link__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Link__Builder
	nb.Reset()
	return &nb
}

type _Link__Builder struct {
	_Link__Assembler
}

func (nb *_Link__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Link__Builder) Reset() {
	var w _Link
	var m schema.Maybe
	*nb = _Link__Builder{_Link__Assembler{w: &w, m: &m}}
}

type _Link__Assembler struct {
	w *_Link
	m *schema.Maybe
}

func (na *_Link__Assembler) reset() {}
func (_Link__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.LinkAssembler{TypeName: "hamt.Link"}.BeginMap(0)
}
func (_Link__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.LinkAssembler{TypeName: "hamt.Link"}.BeginList(0)
}
func (na *_Link__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.LinkAssembler{TypeName: "hamt.Link"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Link__Assembler) AssignBool(bool) error {
	return mixins.LinkAssembler{TypeName: "hamt.Link"}.AssignBool(false)
}
func (_Link__Assembler) AssignInt(int64) error {
	return mixins.LinkAssembler{TypeName: "hamt.Link"}.AssignInt(0)
}
func (_Link__Assembler) AssignFloat(float64) error {
	return mixins.LinkAssembler{TypeName: "hamt.Link"}.AssignFloat(0)
}
func (_Link__Assembler) AssignString(string) error {
	return mixins.LinkAssembler{TypeName: "hamt.Link"}.AssignString("")
}
func (_Link__Assembler) AssignBytes([]byte) error {
	return mixins.LinkAssembler{TypeName: "hamt.Link"}.AssignBytes(nil)
}
func (na *_Link__Assembler) AssignLink(v ipld.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (na *_Link__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Link); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsLink(); err != nil {
		return err
	} else {
		return na.AssignLink(v2)
	}
}
func (_Link__Assembler) Prototype() ipld.NodePrototype {
	return _Link__Prototype{}
}
func (Link) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Link) Representation() ipld.Node {
	return (*_Link__Repr)(n)
}

type _Link__Repr = _Link

var _ ipld.Node = &_Link__Repr{}

type _Link__ReprPrototype = _Link__Prototype
type _Link__ReprAssembler = _Link__Assembler

func (n Link__HashMapNode) Link() ipld.Link {
	return n.x
}
func (_Link__HashMapNode__Prototype) FromLink(v ipld.Link) (Link__HashMapNode, error) {
	n := _Link__HashMapNode{v}
	return &n, nil
}

type _Link__HashMapNode__Maybe struct {
	m schema.Maybe
	v _Link__HashMapNode
}
type MaybeLink__HashMapNode = *_Link__HashMapNode__Maybe

func (m MaybeLink__HashMapNode) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLink__HashMapNode) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLink__HashMapNode) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLink__HashMapNode) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeLink__HashMapNode) Must() Link__HashMapNode {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ ipld.Node = (Link__HashMapNode)(&_Link__HashMapNode{})
var _ schema.TypedNode = (Link__HashMapNode)(&_Link__HashMapNode{})

func (Link__HashMapNode) Kind() ipld.Kind {
	return ipld.Kind_Link
}
func (Link__HashMapNode) LookupByString(string) (ipld.Node, error) {
	return mixins.Link{TypeName: "hamt.Link__HashMapNode"}.LookupByString("")
}
func (Link__HashMapNode) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Link{TypeName: "hamt.Link__HashMapNode"}.LookupByNode(nil)
}
func (Link__HashMapNode) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Link{TypeName: "hamt.Link__HashMapNode"}.LookupByIndex(0)
}
func (Link__HashMapNode) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Link{TypeName: "hamt.Link__HashMapNode"}.LookupBySegment(seg)
}
func (Link__HashMapNode) MapIterator() ipld.MapIterator {
	return nil
}
func (Link__HashMapNode) ListIterator() ipld.ListIterator {
	return nil
}
func (Link__HashMapNode) Length() int64 {
	return -1
}
func (Link__HashMapNode) IsAbsent() bool {
	return false
}
func (Link__HashMapNode) IsNull() bool {
	return false
}
func (Link__HashMapNode) AsBool() (bool, error) {
	return mixins.Link{TypeName: "hamt.Link__HashMapNode"}.AsBool()
}
func (Link__HashMapNode) AsInt() (int64, error) {
	return mixins.Link{TypeName: "hamt.Link__HashMapNode"}.AsInt()
}
func (Link__HashMapNode) AsFloat() (float64, error) {
	return mixins.Link{TypeName: "hamt.Link__HashMapNode"}.AsFloat()
}
func (Link__HashMapNode) AsString() (string, error) {
	return mixins.Link{TypeName: "hamt.Link__HashMapNode"}.AsString()
}
func (Link__HashMapNode) AsBytes() ([]byte, error) {
	return mixins.Link{TypeName: "hamt.Link__HashMapNode"}.AsBytes()
}
func (n Link__HashMapNode) AsLink() (ipld.Link, error) {
	return n.x, nil
}
func (Link__HashMapNode) Prototype() ipld.NodePrototype {
	return _Link__HashMapNode__Prototype{}
}

type _Link__HashMapNode__Prototype struct{}

func (_Link__HashMapNode__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Link__HashMapNode__Builder
	nb.Reset()
	return &nb
}

type _Link__HashMapNode__Builder struct {
	_Link__HashMapNode__Assembler
}

func (nb *_Link__HashMapNode__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Link__HashMapNode__Builder) Reset() {
	var w _Link__HashMapNode
	var m schema.Maybe
	*nb = _Link__HashMapNode__Builder{_Link__HashMapNode__Assembler{w: &w, m: &m}}
}

type _Link__HashMapNode__Assembler struct {
	w *_Link__HashMapNode
	m *schema.Maybe
}

func (na *_Link__HashMapNode__Assembler) reset() {}
func (_Link__HashMapNode__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.LinkAssembler{TypeName: "hamt.Link__HashMapNode"}.BeginMap(0)
}
func (_Link__HashMapNode__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.LinkAssembler{TypeName: "hamt.Link__HashMapNode"}.BeginList(0)
}
func (na *_Link__HashMapNode__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.LinkAssembler{TypeName: "hamt.Link__HashMapNode"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Link__HashMapNode__Assembler) AssignBool(bool) error {
	return mixins.LinkAssembler{TypeName: "hamt.Link__HashMapNode"}.AssignBool(false)
}
func (_Link__HashMapNode__Assembler) AssignInt(int64) error {
	return mixins.LinkAssembler{TypeName: "hamt.Link__HashMapNode"}.AssignInt(0)
}
func (_Link__HashMapNode__Assembler) AssignFloat(float64) error {
	return mixins.LinkAssembler{TypeName: "hamt.Link__HashMapNode"}.AssignFloat(0)
}
func (_Link__HashMapNode__Assembler) AssignString(string) error {
	return mixins.LinkAssembler{TypeName: "hamt.Link__HashMapNode"}.AssignString("")
}
func (_Link__HashMapNode__Assembler) AssignBytes([]byte) error {
	return mixins.LinkAssembler{TypeName: "hamt.Link__HashMapNode"}.AssignBytes(nil)
}
func (na *_Link__HashMapNode__Assembler) AssignLink(v ipld.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (na *_Link__HashMapNode__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Link__HashMapNode); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsLink(); err != nil {
		return err
	} else {
		return na.AssignLink(v2)
	}
}
func (_Link__HashMapNode__Assembler) Prototype() ipld.NodePrototype {
	return _Link__HashMapNode__Prototype{}
}
func (Link__HashMapNode) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (Link__HashMapNode) LinkTargetNodePrototype() ipld.NodePrototype {
	return Type.Link__HashMapNode__Repr
}
func (n Link__HashMapNode) Representation() ipld.Node {
	return (*_Link__HashMapNode__Repr)(n)
}

type _Link__HashMapNode__Repr = _Link__HashMapNode

var _ ipld.Node = &_Link__HashMapNode__Repr{}

type _Link__HashMapNode__ReprPrototype = _Link__HashMapNode__Prototype
type _Link__HashMapNode__ReprAssembler = _Link__HashMapNode__Assembler

func (n *_List) Lookup(idx int64) Any {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	if v.m == schema.Maybe_Null {
		return nil
	}
	return v.v
}
func (n *_List) LookupMaybe(idx int64) MaybeAny {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}

var _List__valueAbsent = _Any__Maybe{m: schema.Maybe_Absent}

func (n List) Iterator() *List__Itr {
	return &List__Itr{n, 0}
}

type List__Itr struct {
	n   List
	idx int
}

func (itr *List__Itr) Next() (idx int64, v MaybeAny) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *List__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _List__Maybe struct {
	m schema.Maybe
	v _List
}
type MaybeList = *_List__Maybe

func (m MaybeList) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeList) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeList) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeList) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeList) Must() List {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ ipld.Node = (List)(&_List{})
var _ schema.TypedNode = (List)(&_List{})

func (List) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (List) LookupByString(string) (ipld.Node, error) {
	return mixins.List{TypeName: "hamt.List"}.LookupByString("")
}
func (n List) LookupByNode(k ipld.Node) (ipld.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n List) LookupByIndex(idx int64) (ipld.Node, error) {
	if n.Length() <= idx {
		return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	if v.m == schema.Maybe_Null {
		return ipld.Null, nil
	}
	return v.v, nil
}
func (n List) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "hamt.List", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (List) MapIterator() ipld.MapIterator {
	return nil
}
func (n List) ListIterator() ipld.ListIterator {
	return &_List__ListItr{n, 0}
}

type _List__ListItr struct {
	n   List
	idx int
}

func (itr *_List__ListItr) Next() (idx int64, v ipld.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	switch x.m {
	case schema.Maybe_Null:
		v = ipld.Null
	case schema.Maybe_Value:
		v = x.v
	}
	itr.idx++
	return
}
func (itr *_List__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n List) Length() int64 {
	return int64(len(n.x))
}
func (List) IsAbsent() bool {
	return false
}
func (List) IsNull() bool {
	return false
}
func (List) AsBool() (bool, error) {
	return mixins.List{TypeName: "hamt.List"}.AsBool()
}
func (List) AsInt() (int64, error) {
	return mixins.List{TypeName: "hamt.List"}.AsInt()
}
func (List) AsFloat() (float64, error) {
	return mixins.List{TypeName: "hamt.List"}.AsFloat()
}
func (List) AsString() (string, error) {
	return mixins.List{TypeName: "hamt.List"}.AsString()
}
func (List) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "hamt.List"}.AsBytes()
}
func (List) AsLink() (ipld.Link, error) {
	return mixins.List{TypeName: "hamt.List"}.AsLink()
}
func (List) Prototype() ipld.NodePrototype {
	return _List__Prototype{}
}

type _List__Prototype struct{}

func (_List__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _List__Builder
	nb.Reset()
	return &nb
}

type _List__Builder struct {
	_List__Assembler
}

func (nb *_List__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List__Builder) Reset() {
	var w _List
	var m schema.Maybe
	*nb = _List__Builder{_List__Assembler{w: &w, m: &m}}
}

type _List__Assembler struct {
	w     *_List
	m     *schema.Maybe
	state laState

	va _Any__Assembler
}

func (na *_List__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "hamt.List"}.BeginMap(0)
}
func (na *_List__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Any__Maybe, 0, sizeHint)
	}
	return na, nil
}
func (na *_List__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "hamt.List"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "hamt.List"}.AssignBool(false)
}
func (_List__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "hamt.List"}.AssignInt(0)
}
func (_List__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "hamt.List"}.AssignFloat(0)
}
func (_List__Assembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "hamt.List"}.AssignString("")
}
func (_List__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "hamt.List"}.AssignBytes(nil)
}
func (_List__Assembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{TypeName: "hamt.List"}.AssignLink(nil)
}
func (na *_List__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "hamt.List", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List__Assembler) Prototype() ipld.NodePrototype {
	return _List__Prototype{}
}
func (la *_List__Assembler) valueFinishTidy() bool {
	row := &la.w.x[len(la.w.x)-1]
	switch row.m {
	case schema.Maybe_Value:
		row.v = la.va.w
		la.va.w = nil
		fallthrough
	case schema.Maybe_Null:
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List__Assembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Any__Maybe{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.m = &row.m
	row.m = allowNull
	return &la.va
}
func (la *_List__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List__Assembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _Any__Prototype{}
}
func (List) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n List) Representation() ipld.Node {
	return (*_List__Repr)(n)
}

type _List__Repr _List

var _ ipld.Node = &_List__Repr{}

func (_List__Repr) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (_List__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{TypeName: "hamt.List.Repr"}.LookupByString("")
}
func (nr *_List__Repr) LookupByNode(k ipld.Node) (ipld.Node, error) {
	v, err := (List)(nr).LookupByNode(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Any).Representation(), nil
}
func (nr *_List__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	v, err := (List)(nr).LookupByIndex(idx)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Any).Representation(), nil
}
func (n _List__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "hamt.List.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_List__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (nr *_List__Repr) ListIterator() ipld.ListIterator {
	return &_List__ReprListItr{(List)(nr), 0}
}

type _List__ReprListItr _List__ListItr

func (itr *_List__ReprListItr) Next() (idx int64, v ipld.Node, err error) {
	idx, v, err = (*_List__ListItr)(itr).Next()
	if err != nil || v == ipld.Null {
		return
	}
	return idx, v.(Any).Representation(), nil
}
func (itr *_List__ReprListItr) Done() bool {
	return (*_List__ListItr)(itr).Done()
}

func (rn *_List__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_List__Repr) IsAbsent() bool {
	return false
}
func (_List__Repr) IsNull() bool {
	return false
}
func (_List__Repr) AsBool() (bool, error) {
	return mixins.List{TypeName: "hamt.List.Repr"}.AsBool()
}
func (_List__Repr) AsInt() (int64, error) {
	return mixins.List{TypeName: "hamt.List.Repr"}.AsInt()
}
func (_List__Repr) AsFloat() (float64, error) {
	return mixins.List{TypeName: "hamt.List.Repr"}.AsFloat()
}
func (_List__Repr) AsString() (string, error) {
	return mixins.List{TypeName: "hamt.List.Repr"}.AsString()
}
func (_List__Repr) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "hamt.List.Repr"}.AsBytes()
}
func (_List__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{TypeName: "hamt.List.Repr"}.AsLink()
}
func (_List__Repr) Prototype() ipld.NodePrototype {
	return _List__ReprPrototype{}
}

type _List__ReprPrototype struct{}

func (_List__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _List__ReprBuilder
	nb.Reset()
	return &nb
}

type _List__ReprBuilder struct {
	_List__ReprAssembler
}

func (nb *_List__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List__ReprBuilder) Reset() {
	var w _List
	var m schema.Maybe
	*nb = _List__ReprBuilder{_List__ReprAssembler{w: &w, m: &m}}
}

type _List__ReprAssembler struct {
	w     *_List
	m     *schema.Maybe
	state laState

	va _Any__ReprAssembler
}

func (na *_List__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "hamt.List.Repr"}.BeginMap(0)
}
func (na *_List__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Any__Maybe, 0, sizeHint)
	}
	return na, nil
}
func (na *_List__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "hamt.List.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "hamt.List.Repr"}.AssignBool(false)
}
func (_List__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "hamt.List.Repr"}.AssignInt(0)
}
func (_List__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "hamt.List.Repr"}.AssignFloat(0)
}
func (_List__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "hamt.List.Repr"}.AssignString("")
}
func (_List__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "hamt.List.Repr"}.AssignBytes(nil)
}
func (_List__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{TypeName: "hamt.List.Repr"}.AssignLink(nil)
}
func (na *_List__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "hamt.List.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List__ReprAssembler) Prototype() ipld.NodePrototype {
	return _List__ReprPrototype{}
}
func (la *_List__ReprAssembler) valueFinishTidy() bool {
	row := &la.w.x[len(la.w.x)-1]
	switch row.m {
	case schema.Maybe_Value:
		row.v = la.va.w
		la.va.w = nil
		fallthrough
	case schema.Maybe_Null:
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Any__Maybe{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.m = &row.m
	row.m = allowNull
	return &la.va
}
func (la *_List__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List__ReprAssembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _Any__ReprPrototype{}
}

func (n *_List__Element) Lookup(idx int64) Element {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}
func (n *_List__Element) LookupMaybe(idx int64) MaybeElement {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return &_Element__Maybe{
		m: schema.Maybe_Value,
		v: v,
	}
}

var _List__Element__valueAbsent = _Element__Maybe{m: schema.Maybe_Absent}

func (n List__Element) Iterator() *List__Element__Itr {
	return &List__Element__Itr{n, 0}
}

type List__Element__Itr struct {
	n   List__Element
	idx int
}

func (itr *List__Element__Itr) Next() (idx int64, v Element) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *List__Element__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _List__Element__Maybe struct {
	m schema.Maybe
	v _List__Element
}
type MaybeList__Element = *_List__Element__Maybe

func (m MaybeList__Element) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeList__Element) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeList__Element) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeList__Element) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeList__Element) Must() List__Element {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ ipld.Node = (List__Element)(&_List__Element{})
var _ schema.TypedNode = (List__Element)(&_List__Element{})

func (List__Element) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (List__Element) LookupByString(string) (ipld.Node, error) {
	return mixins.List{TypeName: "hamt.List__Element"}.LookupByString("")
}
func (n List__Element) LookupByNode(k ipld.Node) (ipld.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n List__Element) LookupByIndex(idx int64) (ipld.Node, error) {
	if n.Length() <= idx {
		return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	return v, nil
}
func (n List__Element) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "hamt.List__Element", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (List__Element) MapIterator() ipld.MapIterator {
	return nil
}
func (n List__Element) ListIterator() ipld.ListIterator {
	return &_List__Element__ListItr{n, 0}
}

type _List__Element__ListItr struct {
	n   List__Element
	idx int
}

func (itr *_List__Element__ListItr) Next() (idx int64, v ipld.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	v = x
	itr.idx++
	return
}
func (itr *_List__Element__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n List__Element) Length() int64 {
	return int64(len(n.x))
}
func (List__Element) IsAbsent() bool {
	return false
}
func (List__Element) IsNull() bool {
	return false
}
func (List__Element) AsBool() (bool, error) {
	return mixins.List{TypeName: "hamt.List__Element"}.AsBool()
}
func (List__Element) AsInt() (int64, error) {
	return mixins.List{TypeName: "hamt.List__Element"}.AsInt()
}
func (List__Element) AsFloat() (float64, error) {
	return mixins.List{TypeName: "hamt.List__Element"}.AsFloat()
}
func (List__Element) AsString() (string, error) {
	return mixins.List{TypeName: "hamt.List__Element"}.AsString()
}
func (List__Element) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "hamt.List__Element"}.AsBytes()
}
func (List__Element) AsLink() (ipld.Link, error) {
	return mixins.List{TypeName: "hamt.List__Element"}.AsLink()
}
func (List__Element) Prototype() ipld.NodePrototype {
	return _List__Element__Prototype{}
}

type _List__Element__Prototype struct{}

func (_List__Element__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _List__Element__Builder
	nb.Reset()
	return &nb
}

type _List__Element__Builder struct {
	_List__Element__Assembler
}

func (nb *_List__Element__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List__Element__Builder) Reset() {
	var w _List__Element
	var m schema.Maybe
	*nb = _List__Element__Builder{_List__Element__Assembler{w: &w, m: &m}}
}

type _List__Element__Assembler struct {
	w     *_List__Element
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _Element__Assembler
}

func (na *_List__Element__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List__Element__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "hamt.List__Element"}.BeginMap(0)
}
func (na *_List__Element__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Element, 0, sizeHint)
	}
	return na, nil
}
func (na *_List__Element__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "hamt.List__Element"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List__Element__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "hamt.List__Element"}.AssignBool(false)
}
func (_List__Element__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "hamt.List__Element"}.AssignInt(0)
}
func (_List__Element__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "hamt.List__Element"}.AssignFloat(0)
}
func (_List__Element__Assembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "hamt.List__Element"}.AssignString("")
}
func (_List__Element__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "hamt.List__Element"}.AssignBytes(nil)
}
func (_List__Element__Assembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{TypeName: "hamt.List__Element"}.AssignLink(nil)
}
func (na *_List__Element__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List__Element); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "hamt.List__Element", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List__Element__Assembler) Prototype() ipld.NodePrototype {
	return _List__Element__Prototype{}
}
func (la *_List__Element__Assembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List__Element__Assembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Element{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_List__Element__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List__Element__Assembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _Element__Prototype{}
}
func (List__Element) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n List__Element) Representation() ipld.Node {
	return (*_List__Element__Repr)(n)
}

type _List__Element__Repr _List__Element

var _ ipld.Node = &_List__Element__Repr{}

func (_List__Element__Repr) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (_List__Element__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{TypeName: "hamt.List__Element.Repr"}.LookupByString("")
}
func (nr *_List__Element__Repr) LookupByNode(k ipld.Node) (ipld.Node, error) {
	v, err := (List__Element)(nr).LookupByNode(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Element).Representation(), nil
}
func (nr *_List__Element__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	v, err := (List__Element)(nr).LookupByIndex(idx)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Element).Representation(), nil
}
func (n _List__Element__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "hamt.List__Element.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_List__Element__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (nr *_List__Element__Repr) ListIterator() ipld.ListIterator {
	return &_List__Element__ReprListItr{(List__Element)(nr), 0}
}

type _List__Element__ReprListItr _List__Element__ListItr

func (itr *_List__Element__ReprListItr) Next() (idx int64, v ipld.Node, err error) {
	idx, v, err = (*_List__Element__ListItr)(itr).Next()
	if err != nil || v == ipld.Null {
		return
	}
	return idx, v.(Element).Representation(), nil
}
func (itr *_List__Element__ReprListItr) Done() bool {
	return (*_List__Element__ListItr)(itr).Done()
}

func (rn *_List__Element__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_List__Element__Repr) IsAbsent() bool {
	return false
}
func (_List__Element__Repr) IsNull() bool {
	return false
}
func (_List__Element__Repr) AsBool() (bool, error) {
	return mixins.List{TypeName: "hamt.List__Element.Repr"}.AsBool()
}
func (_List__Element__Repr) AsInt() (int64, error) {
	return mixins.List{TypeName: "hamt.List__Element.Repr"}.AsInt()
}
func (_List__Element__Repr) AsFloat() (float64, error) {
	return mixins.List{TypeName: "hamt.List__Element.Repr"}.AsFloat()
}
func (_List__Element__Repr) AsString() (string, error) {
	return mixins.List{TypeName: "hamt.List__Element.Repr"}.AsString()
}
func (_List__Element__Repr) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "hamt.List__Element.Repr"}.AsBytes()
}
func (_List__Element__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{TypeName: "hamt.List__Element.Repr"}.AsLink()
}
func (_List__Element__Repr) Prototype() ipld.NodePrototype {
	return _List__Element__ReprPrototype{}
}

type _List__Element__ReprPrototype struct{}

func (_List__Element__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _List__Element__ReprBuilder
	nb.Reset()
	return &nb
}

type _List__Element__ReprBuilder struct {
	_List__Element__ReprAssembler
}

func (nb *_List__Element__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List__Element__ReprBuilder) Reset() {
	var w _List__Element
	var m schema.Maybe
	*nb = _List__Element__ReprBuilder{_List__Element__ReprAssembler{w: &w, m: &m}}
}

type _List__Element__ReprAssembler struct {
	w     *_List__Element
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _Element__ReprAssembler
}

func (na *_List__Element__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List__Element__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "hamt.List__Element.Repr"}.BeginMap(0)
}
func (na *_List__Element__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Element, 0, sizeHint)
	}
	return na, nil
}
func (na *_List__Element__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "hamt.List__Element.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List__Element__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "hamt.List__Element.Repr"}.AssignBool(false)
}
func (_List__Element__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "hamt.List__Element.Repr"}.AssignInt(0)
}
func (_List__Element__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "hamt.List__Element.Repr"}.AssignFloat(0)
}
func (_List__Element__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "hamt.List__Element.Repr"}.AssignString("")
}
func (_List__Element__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "hamt.List__Element.Repr"}.AssignBytes(nil)
}
func (_List__Element__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{TypeName: "hamt.List__Element.Repr"}.AssignLink(nil)
}
func (na *_List__Element__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List__Element); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "hamt.List__Element.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List__Element__ReprAssembler) Prototype() ipld.NodePrototype {
	return _List__Element__ReprPrototype{}
}
func (la *_List__Element__ReprAssembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List__Element__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Element{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_List__Element__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List__Element__ReprAssembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _Element__ReprPrototype{}
}

func (n *_Map) Lookup(k String) Any {
	v, exists := n.m[*k]
	if !exists {
		return nil
	}
	if v.m == schema.Maybe_Null {
		return nil
	}
	return v.v
}
func (n *_Map) LookupMaybe(k String) MaybeAny {
	v, exists := n.m[*k]
	if !exists {
		return &_Map__valueAbsent
	}
	return v
}

var _Map__valueAbsent = _Any__Maybe{m: schema.Maybe_Absent}

func (n Map) Iterator() *Map__Itr {
	return &Map__Itr{n, 0}
}

type Map__Itr struct {
	n   Map
	idx int
}

func (itr *Map__Itr) Next() (k String, v MaybeAny) {
	if itr.idx >= len(itr.n.t) {
		return nil, nil
	}
	x := &itr.n.t[itr.idx]
	k = &x.k
	v = &x.v
	itr.idx++
	return
}
func (itr *Map__Itr) Done() bool {
	return itr.idx >= len(itr.n.t)
}

type _Map__Maybe struct {
	m schema.Maybe
	v _Map
}
type MaybeMap = *_Map__Maybe

func (m MaybeMap) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeMap) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeMap) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeMap) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeMap) Must() Map {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ ipld.Node = (Map)(&_Map{})
var _ schema.TypedNode = (Map)(&_Map{})

func (Map) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n Map) LookupByString(k string) (ipld.Node, error) {
	var k2 _String
	if err := (_String__Prototype{}).fromString(&k2, k); err != nil {
		return nil, err // TODO wrap in some kind of ErrInvalidKey
	}
	v, exists := n.m[k2]
	if !exists {
		return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(k)}
	}
	if v.m == schema.Maybe_Null {
		return ipld.Null, nil
	}
	return v.v, nil
}
func (n Map) LookupByNode(k ipld.Node) (ipld.Node, error) {
	k2, ok := k.(String)
	if !ok {
		panic("todo invalid key type error")
		// 'ipld.ErrInvalidKey{TypeName:"hamt.Map", Key:&_String{k}}' doesn't quite cut it: need room to explain the type, and it's not guaranteed k can be turned into a string at all
	}
	v, exists := n.m[*k2]
	if !exists {
		return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(k2.String())}
	}
	if v.m == schema.Maybe_Null {
		return ipld.Null, nil
	}
	return v.v, nil
}
func (Map) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "hamt.Map"}.LookupByIndex(0)
}
func (n Map) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Map) MapIterator() ipld.MapIterator {
	return &_Map__MapItr{n, 0}
}

type _Map__MapItr struct {
	n   Map
	idx int
}

func (itr *_Map__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= len(itr.n.t) {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	x := &itr.n.t[itr.idx]
	k = &x.k
	switch x.v.m {
	case schema.Maybe_Null:
		v = ipld.Null
	case schema.Maybe_Value:
		v = x.v.v
	}
	itr.idx++
	return
}
func (itr *_Map__MapItr) Done() bool {
	return itr.idx >= len(itr.n.t)
}

func (Map) ListIterator() ipld.ListIterator {
	return nil
}
func (n Map) Length() int64 {
	return int64(len(n.t))
}
func (Map) IsAbsent() bool {
	return false
}
func (Map) IsNull() bool {
	return false
}
func (Map) AsBool() (bool, error) {
	return mixins.Map{TypeName: "hamt.Map"}.AsBool()
}
func (Map) AsInt() (int64, error) {
	return mixins.Map{TypeName: "hamt.Map"}.AsInt()
}
func (Map) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "hamt.Map"}.AsFloat()
}
func (Map) AsString() (string, error) {
	return mixins.Map{TypeName: "hamt.Map"}.AsString()
}
func (Map) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "hamt.Map"}.AsBytes()
}
func (Map) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "hamt.Map"}.AsLink()
}
func (Map) Prototype() ipld.NodePrototype {
	return _Map__Prototype{}
}

type _Map__Prototype struct{}

func (_Map__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Map__Builder
	nb.Reset()
	return &nb
}

type _Map__Builder struct {
	_Map__Assembler
}

func (nb *_Map__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Map__Builder) Reset() {
	var w _Map
	var m schema.Maybe
	*nb = _Map__Builder{_Map__Assembler{w: &w, m: &m}}
}

type _Map__Assembler struct {
	w     *_Map
	m     *schema.Maybe
	state maState

	cm schema.Maybe
	ka _String__Assembler
	va _Any__Assembler
}

func (na *_Map__Assembler) reset() {
	na.state = maState_initial
	na.ka.reset()
	na.va.reset()
}
func (na *_Map__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	na.w.m = make(map[_String]MaybeAny, sizeHint)
	na.w.t = make([]_Map__entry, 0, sizeHint)
	return na, nil
}
func (_Map__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "hamt.Map"}.BeginList(0)
}
func (na *_Map__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "hamt.Map"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Map__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "hamt.Map"}.AssignBool(false)
}
func (_Map__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "hamt.Map"}.AssignInt(0)
}
func (_Map__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "hamt.Map"}.AssignFloat(0)
}
func (_Map__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "hamt.Map"}.AssignString("")
}
func (_Map__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "hamt.Map"}.AssignBytes(nil)
}
func (_Map__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "hamt.Map"}.AssignLink(nil)
}
func (na *_Map__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Map); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "hamt.Map", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Map__Assembler) Prototype() ipld.NodePrototype {
	return _Map__Prototype{}
}
func (ma *_Map__Assembler) keyFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.ka.w = nil
		tz := &ma.w.t[len(ma.w.t)-1]
		ma.cm = schema.Maybe_Absent
		ma.state = maState_expectValue
		ma.w.m[tz.k] = &tz.v
		ma.va.m = &tz.v.m
		tz.v.m = allowNull
		ma.ka.reset()
		return true
	default:
		return false
	}
}
func (ma *_Map__Assembler) valueFinishTidy() bool {
	tz := &ma.w.t[len(ma.w.t)-1]
	switch tz.v.m {
	case schema.Maybe_Null:
		ma.state = maState_initial
		ma.va.reset()
		return true
	case schema.Maybe_Value:
		tz.v.v = ma.va.w
		ma.va.w = nil
		ma.state = maState_initial
		ma.va.reset()
		return true
	default:
		return false
	}
}
func (ma *_Map__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}

	var k2 _String
	if err := (_String__Prototype{}).fromString(&k2, k); err != nil {
		return nil, err // TODO wrap in some kind of ErrInvalidKey
	}
	if _, exists := ma.w.m[k2]; exists {
		return nil, ipld.ErrRepeatedMapKey{Key: &k2}
	}
	ma.w.t = append(ma.w.t, _Map__entry{k: k2})
	tz := &ma.w.t[len(ma.w.t)-1]
	ma.state = maState_midValue

	ma.w.m[k2] = &tz.v
	ma.va.m = &tz.v.m
	tz.v.m = allowNull
	return &ma.va, nil
}
func (ma *_Map__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.w.t = append(ma.w.t, _Map__entry{})
	ma.state = maState_midKey
	ma.ka.m = &ma.cm
	ma.ka.w = &ma.w.t[len(ma.w.t)-1].k
	return &ma.ka
}
func (ma *_Map__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		if !ma.keyFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
		} // if tidy success: carry on
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	return &ma.va
}
func (ma *_Map__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Map__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Map__Assembler) ValuePrototype(_ string) ipld.NodePrototype {
	return _Any__Prototype{}
}
func (Map) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Map) Representation() ipld.Node {
	return (*_Map__Repr)(n)
}

type _Map__Repr _Map

var _ ipld.Node = &_Map__Repr{}

func (_Map__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (nr *_Map__Repr) LookupByString(k string) (ipld.Node, error) {
	v, err := (Map)(nr).LookupByString(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Any).Representation(), nil
}
func (nr *_Map__Repr) LookupByNode(k ipld.Node) (ipld.Node, error) {
	v, err := (Map)(nr).LookupByNode(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Any).Representation(), nil
}
func (_Map__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "hamt.Map.Repr"}.LookupByIndex(0)
}
func (n _Map__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (nr *_Map__Repr) MapIterator() ipld.MapIterator {
	return &_Map__ReprMapItr{(Map)(nr), 0}
}

type _Map__ReprMapItr _Map__MapItr

func (itr *_Map__ReprMapItr) Next() (k ipld.Node, v ipld.Node, err error) {
	k, v, err = (*_Map__MapItr)(itr).Next()
	if err != nil || v == ipld.Null {
		return
	}
	return k, v.(Any).Representation(), nil
}
func (itr *_Map__ReprMapItr) Done() bool {
	return (*_Map__MapItr)(itr).Done()
}

func (_Map__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_Map__Repr) Length() int64 {
	return int64(len(rn.t))
}
func (_Map__Repr) IsAbsent() bool {
	return false
}
func (_Map__Repr) IsNull() bool {
	return false
}
func (_Map__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "hamt.Map.Repr"}.AsBool()
}
func (_Map__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "hamt.Map.Repr"}.AsInt()
}
func (_Map__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "hamt.Map.Repr"}.AsFloat()
}
func (_Map__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "hamt.Map.Repr"}.AsString()
}
func (_Map__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "hamt.Map.Repr"}.AsBytes()
}
func (_Map__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "hamt.Map.Repr"}.AsLink()
}
func (_Map__Repr) Prototype() ipld.NodePrototype {
	return _Map__ReprPrototype{}
}

type _Map__ReprPrototype struct{}

func (_Map__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Map__ReprBuilder
	nb.Reset()
	return &nb
}

type _Map__ReprBuilder struct {
	_Map__ReprAssembler
}

func (nb *_Map__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Map__ReprBuilder) Reset() {
	var w _Map
	var m schema.Maybe
	*nb = _Map__ReprBuilder{_Map__ReprAssembler{w: &w, m: &m}}
}

type _Map__ReprAssembler struct {
	w     *_Map
	m     *schema.Maybe
	state maState

	cm schema.Maybe
	ka _String__ReprAssembler
	va _Any__ReprAssembler
}

func (na *_Map__ReprAssembler) reset() {
	na.state = maState_initial
	na.ka.reset()
	na.va.reset()
}
func (na *_Map__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	na.w.m = make(map[_String]MaybeAny, sizeHint)
	na.w.t = make([]_Map__entry, 0, sizeHint)
	return na, nil
}
func (_Map__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "hamt.Map.Repr"}.BeginList(0)
}
func (na *_Map__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "hamt.Map.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Map__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "hamt.Map.Repr"}.AssignBool(false)
}
func (_Map__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "hamt.Map.Repr"}.AssignInt(0)
}
func (_Map__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "hamt.Map.Repr"}.AssignFloat(0)
}
func (_Map__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "hamt.Map.Repr"}.AssignString("")
}
func (_Map__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "hamt.Map.Repr"}.AssignBytes(nil)
}
func (_Map__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "hamt.Map.Repr"}.AssignLink(nil)
}
func (na *_Map__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Map); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "hamt.Map.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Map__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Map__ReprPrototype{}
}
func (ma *_Map__ReprAssembler) keyFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.ka.w = nil
		tz := &ma.w.t[len(ma.w.t)-1]
		ma.cm = schema.Maybe_Absent
		ma.state = maState_expectValue
		ma.w.m[tz.k] = &tz.v
		ma.va.m = &tz.v.m
		tz.v.m = allowNull
		ma.ka.reset()
		return true
	default:
		return false
	}
}
func (ma *_Map__ReprAssembler) valueFinishTidy() bool {
	tz := &ma.w.t[len(ma.w.t)-1]
	switch tz.v.m {
	case schema.Maybe_Null:
		ma.state = maState_initial
		ma.va.reset()
		return true
	case schema.Maybe_Value:
		tz.v.v = ma.va.w
		ma.va.w = nil
		ma.state = maState_initial
		ma.va.reset()
		return true
	default:
		return false
	}
}
func (ma *_Map__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}

	var k2 _String
	if err := (_String__ReprPrototype{}).fromString(&k2, k); err != nil {
		return nil, err // TODO wrap in some kind of ErrInvalidKey
	}
	if _, exists := ma.w.m[k2]; exists {
		return nil, ipld.ErrRepeatedMapKey{Key: &k2}
	}
	ma.w.t = append(ma.w.t, _Map__entry{k: k2})
	tz := &ma.w.t[len(ma.w.t)-1]
	ma.state = maState_midValue

	ma.w.m[k2] = &tz.v
	ma.va.m = &tz.v.m
	tz.v.m = allowNull
	return &ma.va, nil
}
func (ma *_Map__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.w.t = append(ma.w.t, _Map__entry{})
	ma.state = maState_midKey
	ma.ka.m = &ma.cm
	ma.ka.w = &ma.w.t[len(ma.w.t)-1].k
	return &ma.ka
}
func (ma *_Map__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		if !ma.keyFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
		} // if tidy success: carry on
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	return &ma.va
}
func (ma *_Map__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Map__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__ReprPrototype{}
}
func (ma *_Map__ReprAssembler) ValuePrototype(_ string) ipld.NodePrototype {
	return _Any__ReprPrototype{}
}

func (n String) String() string {
	return n.x
}
func (_String__Prototype) fromString(w *_String, v string) error {
	*w = _String{v}
	return nil
}
func (_String__Prototype) FromString(v string) (String, error) {
	n := _String{v}
	return &n, nil
}

type _String__Maybe struct {
	m schema.Maybe
	v _String
}
type MaybeString = *_String__Maybe

func (m MaybeString) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeString) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeString) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeString) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeString) Must() String {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ ipld.Node = (String)(&_String{})
var _ schema.TypedNode = (String)(&_String{})

func (String) Kind() ipld.Kind {
	return ipld.Kind_String
}
func (String) LookupByString(string) (ipld.Node, error) {
	return mixins.String{TypeName: "hamt.String"}.LookupByString("")
}
func (String) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.String{TypeName: "hamt.String"}.LookupByNode(nil)
}
func (String) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.String{TypeName: "hamt.String"}.LookupByIndex(0)
}
func (String) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.String{TypeName: "hamt.String"}.LookupBySegment(seg)
}
func (String) MapIterator() ipld.MapIterator {
	return nil
}
func (String) ListIterator() ipld.ListIterator {
	return nil
}
func (String) Length() int64 {
	return -1
}
func (String) IsAbsent() bool {
	return false
}
func (String) IsNull() bool {
	return false
}
func (String) AsBool() (bool, error) {
	return mixins.String{TypeName: "hamt.String"}.AsBool()
}
func (String) AsInt() (int64, error) {
	return mixins.String{TypeName: "hamt.String"}.AsInt()
}
func (String) AsFloat() (float64, error) {
	return mixins.String{TypeName: "hamt.String"}.AsFloat()
}
func (n String) AsString() (string, error) {
	return n.x, nil
}
func (String) AsBytes() ([]byte, error) {
	return mixins.String{TypeName: "hamt.String"}.AsBytes()
}
func (String) AsLink() (ipld.Link, error) {
	return mixins.String{TypeName: "hamt.String"}.AsLink()
}
func (String) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}

type _String__Prototype struct{}

func (_String__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _String__Builder
	nb.Reset()
	return &nb
}

type _String__Builder struct {
	_String__Assembler
}

func (nb *_String__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_String__Builder) Reset() {
	var w _String
	var m schema.Maybe
	*nb = _String__Builder{_String__Assembler{w: &w, m: &m}}
}

type _String__Assembler struct {
	w *_String
	m *schema.Maybe
}

func (na *_String__Assembler) reset() {}
func (_String__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "hamt.String"}.BeginMap(0)
}
func (_String__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "hamt.String"}.BeginList(0)
}
func (na *_String__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.StringAssembler{TypeName: "hamt.String"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_String__Assembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "hamt.String"}.AssignBool(false)
}
func (_String__Assembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "hamt.String"}.AssignInt(0)
}
func (_String__Assembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "hamt.String"}.AssignFloat(0)
}
func (na *_String__Assembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_String__Assembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "hamt.String"}.AssignBytes(nil)
}
func (_String__Assembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "hamt.String"}.AssignLink(nil)
}
func (na *_String__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_String); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return na.AssignString(v2)
	}
}
func (_String__Assembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (String) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n String) Representation() ipld.Node {
	return (*_String__Repr)(n)
}

type _String__Repr = _String

var _ ipld.Node = &_String__Repr{}

type _String__ReprPrototype = _String__Prototype
type _String__ReprAssembler = _String__Assembler
